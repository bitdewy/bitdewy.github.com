<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++ | Bitdewy]]></title>
  <link href="http://bitdewy.github.com/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://bitdewy.github.com/"/>
  <updated>2013-12-09T02:28:26+08:00</updated>
  <id>http://bitdewy.github.com/</id>
  <author>
    <name><![CDATA[bitdewy]]></name>
    <email><![CDATA[bitdewy@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C++11 std::tuple 和它的应用]]></title>
    <link href="http://bitdewy.github.com/blog/2013/12/08/cpp11-tuple/"/>
    <updated>2013-12-08T17:36:00+08:00</updated>
    <id>http://bitdewy.github.com/blog/2013/12/08/cpp11-tuple</id>
    <content type="html"><![CDATA[<p>模板类 <code>std::tuple</code> 是一个固定大小, 存储元素类型不同的集合. 它是 <code>std::pair</code> 的泛化版本.</p>

<p>一个 tuple 可以显示的声明它每个元素的类型, 也可以用 <code>std::make_tuple</code> 模板函数来实现自动类型推导. 可以用 <code>std::get</code> 指定索引来访问 tuple 中的元素. 如下:</p>

<p>```cpp
std::tuple&lt;string, int> t2(&ldquo;bitdewy&rdquo;, 123);</p>

<p>auto t = std::make_tuple(string(&ldquo;bitdewy&rdquo;), 10, 1.23);  // t will be of type tuple&lt;string, int, double>
std::string s = std::get<0>(t);
int x = std::get<1>(t);
double d = std::get<2>(t);
```</p>

<p>当编译期我们需要一个存放不同类型数据的集合, 但又不想定义一个具名的类时 tuple 是非常有用的. 例如 <code>std::function</code> 和 <code>std::bind</code> 就使用 tuple 来存放参数(我们都知道 <code>std::bind</code> 从第二个参数开始, 就是函数的参数了, 参数个数是不定的, 类型也是不定的, 这太适合用 <code>tuple</code> 来定义以及存储函数参数列表了). 尤其是 C++11 开始支持变长模板参数了, 这样一来 tuple 就变得更方便了.</p>

<h2>std::tie</h2>

<p>很多时候我们都希望函数能够返回两个或者更多个值, <code>std::tie</code> 可以帮助我们解决这个问题. <code>std::tie</code> 会构造一个每个元素都是左值引用的 <code>std::tuple</code>. 所以当一个函数返回一个 <code>std::tuple</code> 时, 我们可以使用 <code>std::tie</code> 构造一个 <code>std::tuple</code> 来接收这些返回值. 同时, 如果我们的类的每个元素都支持比较的话, 我们还可以直接使用它来构造一个 <code>std::tuple</code> 来使用 <code>std::tuple</code> 的比较函数. 如下:</p>

<!-- more -->


<p>```cpp</p>

<h1>include <iostream></h1>

<h1>include <string></h1>

<h1>include <set></h1>

<h1>include <tuple></h1>

<p>struct S {</p>

<pre><code>int n;
std::string s;
float d;
bool operator&lt;(const S&amp; rhs) const {
    return std::tie(n, s, d) &lt; std::tie(rhs.n, rhs.s, rhs.d);
}
</code></pre>

<p>};</p>

<p>int main() {</p>

<pre><code>std::set&lt;S&gt; set_of_s; // S is LessThanComparable

S value{ 42, "Test", 3.14 };
std::set&lt;S&gt;::iterator iter;
bool inserted;

// unpacks the return value of insert into iter and inserted
std::tie(iter, inserted) = set_of_s.insert(value);

if (inserted) {
    std::cout &lt;&lt; "Value was inserted successfully\n";
}
return 0;
</code></pre>

<p>}
```</p>

<h2>tuple_visitor</h2>

<p>visitor 模式是 GoF 书中描述的 23 种设计模式中最难懂的一个. 这个模式甚至让 <a href="http://www.artima.com/cppsource/top_cpp_aha_moments.html">Scott Meyers</a> 都困惑了一阵, 显然这个模式的名字没有取好, 而且例子中继承过来继承过去的绕了很多道弯很容易就让你搞不清楚它到底是在做什么的了.</p>

<p>回顾一下我们熟悉的虚函数, 本质上虚函数的作用是<strong>在不改变行为的基础上可以任意扩展类型</strong>, 也就是说我们可以在不更改原有代码的情况下, 将新的类型插入到我们原有的系统中而不需要更改原有系统的代码.</p>

<p>而 visitor 模式只是从另一个角度进行了解耦, 本质上 visitor 模式的作用是<strong>在不改变类型的基础上可以任意扩展对类型的操作</strong>.</p>

<p>不明白上面两句话的可以看看这两篇<a href="http://www.cnblogs.com/geniusvczh/archive/2013/05/25/3098496.html">如何设计一门语言（五）——面向对象和消息发送</a>, <a href="http://www.cnblogs.com/geniusvczh/p/3416833.html">如何设计一门语言（十二）——设计可扩展的类型</a>文章.</p>

<p>之前介绍过 <a href="http://bitdewy.github.io/blog/2013/07/15/static-visitor/">boost.variant.static_visitor</a>, 没有了一个一个的继承,写起来比原始的 visitor 模式简单很多, 如果写过 parser 生成过 AST 然后对它操作的话, 那么你可能对 visitor 有更深刻的理解, 本质上它就是函数式语言中含有<strong>模式匹配</strong>的递归函数.</p>

<p>模式匹配不是什么新玩意儿, 事实上, 它甚至和函数式编程的关系都不大. 把产生模式匹配归因于函数式编程的唯一的原因是函数式语言早就提供了模式匹配, 然而现在的命令式语言还大多做不到. C++ 中的模板特化实际上就是一种模式匹配(类型模式). 比如 <code>std::enable_if</code> 里面经常要用到的 type traits. 下面是一个最简单的模式匹配的例子:</p>

<p>```cpp
template <int N>
struct Factorial {
  static const int value = N * Factorial<N - 1>::value;
};</p>

<p>// Base case via template specialization:</p>

<p>template &lt;>
struct Factorial<0> {
  static const int value = 1;
};
```</p>

<p>这可能是每一个介绍模板元编程都要使用的一个例子, 它利用模式匹配成功的消灭了分支, 进行了编译期的运算, 当然这是个只能演示而没有什么实际意义的代码. 但是表达了模式匹配的意义,</p>

<p>回到正题, 继续我们的 visitor, 有时候我们有遍历 <code>tuple</code> 中存储元素的需求, 最简单的比如按顺序打印, 也许还有其他的针对每个元素的操作, 理论上这和 visitor 模式是类似的. 简单的实现如下:</p>

<p>```cpp</p>

<h1>include <tuple></h1>

<h1>include <iostream></h1>

<p>template&lt;std::size_t> struct int_{};</p>

<p>template <typename Functor, typename Tuple>
void tuple_visitor_impl(Functor&amp;&amp; functor, const Tuple&amp; t, int_<1>) {
  functor(std::get&lt;std::tuple_size<Tuple>::value &ndash; 1>(t));
}</p>

<p>template <typename Functor, typename Tuple, size_t Pos>
void tuple_visitor_impl(Functor&amp;&amp; functor, const Tuple&amp; t, int<em><Pos>) {
  functor(std::get&lt;std::tuple_size<Tuple>::value &ndash; Pos>(t));
  tuple_visitor_impl(std::forward&lt;Functor&amp;&amp;>(functor), t, int</em><Pos - 1>());
}</p>

<p>template <typename Functor, typename... Args>
void tuple_visitor(Functor&amp;&amp; functor, const std::tuple&lt;Args&hellip;>&amp; t) {
  tuple_visitor_impl(std::forward&lt;Functor&amp;&amp;>(functor), t, int_&lt;sizeof&hellip;(Args)>());
}</p>

<p>struct F {
  template <typename T>
  void operator()(T&amp;&amp; t) { std::cout &lt;&lt; &ldquo;unexpect type: &rdquo; &lt;&lt; typeid(std::forward&lt;T&amp;&amp;>(t)).name() &lt;&lt; std::endl; }
  void operator()(int i) { std::cout &lt;&lt; &ldquo;void F::operator()(int): &rdquo; &lt;&lt; i &lt;&lt; std::endl; }
  void operator()(double d) { std::cout &lt;&lt; &ldquo;void F::operator()(double): &rdquo; &lt;&lt; d &lt;&lt; std::endl; }
  void operator()(const std::string&amp; s) { std::cout &lt;&lt; &ldquo;void F::operator()(const std::string&amp;): &rdquo; &lt;&lt; s &lt;&lt; std::endl; }</p>

<p>};</p>

<p>int main() {
  auto t = std::make_tuple(10, std::string(&ldquo;Test&rdquo;), 3.14);
  F f;
  tuple_visitor(f, t);
  return 0;
}
```</p>

<p>当然 F 中要有针对每个类型的 <code>operator()</code>, 这样才能保证每个类型的 <code>tuple</code> 元素都能得到正确的处理, 当然由于我们有泛型版本的 <code>operator()</code> 所以任何类型都能正确接收, 只是行为不正确而已, 上面的代码中是打印出了数据类型, 更好的做法可能是抛出一个异常. 例子中的 <code>operator()</code> 都是重载, 实际上改为特化会更具通用性, 因为一旦改为特化, 那么 <code>struct F</code> 就可以变成框架内的细节, 可以做一些额外的工作. 当用户想要使用 <code>tuple_visitor</code> 的时候, 只需要针对 <code>tuple</code> 中的元素类型, 特化自己的 <code>F::operator()</code> 就可以了.</p>

<h2>tuple_expander</h2>

<p>还记得最上面介绍 <code>tuple</code> 的时候说的, <code>std::bind</code> 是用 <code>tuple</code> 来存储函数参数的吗? 那么由参数构造一个 <code>tuple</code> 是很显而易见的, 那么如何展开一个 <code>tuple</code> 呢?
这里有一个实现, 可以作为参考. <a href="https://github.com/bitdewy/snippet/blob/master/utility/expander.hpp">snippet/utility/expander.hpp</a></p>

<h2>参考</h2>

<ul>
<li>cppreference.com <a href="http://en.cppreference.com/w/cpp/utility/tuple">std::tuple</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[crypto++ 试用]]></title>
    <link href="http://bitdewy.github.com/blog/2013/11/18/cryptopp-aes-rsa/"/>
    <updated>2013-11-18T00:04:00+08:00</updated>
    <id>http://bitdewy.github.com/blog/2013/11/18/cryptopp-aes-rsa</id>
    <content type="html"><![CDATA[<p>由于某些需求, 需要研究一下加密解密的相关内容, 于是找到了 crypto++, 常见的加密算法, 这里面差不多都有了, 但是想用的话, 还是需要先补一下密码学相关的基础知识.</p>

<h2>对等加密</h2>

<p>对等加密 (Reciprocal cipher) 又称为对称密钥加密 (Symmetric-key algorithm), 对称加密, 私钥加密, 共享密钥加密, 是密码学中的一类加密算法. 该类密码的加密算法是它自己本身的逆反函数, 所以其解密算法等同于加密算法, 也就是说, 要还原对等加密的密文, 套用加密同样的算法即可得到明文. 换句话说, 若参数 (或密钥) 合适的话, 两次连续的对等加密运算后会回复原始文字. 在数学上, 这有时称之为对合. 在实际应用中, 体现为加密和解密使用同一个密钥, 或者知道一方密钥能够轻易计算出另一方密钥.</p>

<p>常见的对称加密算法有 DES, 3DES, AES, Blowfish, IDEA, RC4, RC5, RC6.</p>

<p>在对称钥匙密码学中, 加密和解密使用相同的钥匙, 也许对不同的信息使用不同的钥匙, 但都面临钥匙管理的难题. 由于每对通讯方都必须使用异于他组的钥匙, 当网络成员的数量增加时, 钥匙数量成二次方增加. 更尴尬的难题是: 当安全的通道不存在于双方时, 如何建立一个共有的钥匙以利安全的通讯? 如果有通道可以安全地建立钥匙, 何不使用现有的通道. 这个 &ldquo;鸡生蛋, 蛋生鸡&rdquo; 的矛盾是长年以来密码学无法在真实世界应用的阻碍.</p>

<h2>公开密钥加密</h2>

<p>公开密钥加密 (英语: Public-key cryptography, 也称为非对称(密钥)加密), 该思想最早由雷夫·莫寇 (Ralph C. Merkle) 在 1974 年提出, 之后在 1976 年. 狄菲 (Whitfield Diffie) 与赫尔曼 (Martin Hellman) 两位学者以单向函数与单向暗门函数为基础, 为发讯与收讯的两方创建密钥.</p>

<p>非对称密钥, 是指一对加密密钥与解密密钥, 这两个密钥是数学相关, 用某用户密钥加密后所得的信息, 只能用该用户的解密密钥才能解密. 如果知道了其中一个, 并不能计算出另外一个. 因此如果公开了一对密钥中的一个, 并不会危害到另外一个的秘密性质. 称公开的密钥为公钥; 不公开的密钥为私钥.</p>

<!-- more -->


<p>如果加密密钥是公开的, 这用于客户给私钥所有者上传加密的数据, 这被称作为公开密钥加密 (狭义). 例如, 网络银行的客户发给银行网站的账户操作的加密数据.</p>

<p>如果解密密钥是公开的, 用私钥加密的信息, 可以用公钥对其解密, 用于客户验证持有私钥一方发布的数据或文件是完整准确的, 接收者由此可知这条信息确实来自于拥有私钥的某人, 这被称作数字签名, 公钥的形式就是数字证书. 例如, 从网上下载的安装程序, 一般都带有程序制作者的数字签名, 可以证明该程序的确是该作者 (公司) 发布的而不是第三方伪造的且未被篡改过 (身份认证/验证).</p>

<p>常见的公钥加密算法有: RSA, ElGamal, 背包算法, Rabin (RSA的特例), 迪菲－赫尔曼密钥交换协议中的公钥加密算法, 椭圆曲线加密算法 (英语: Elliptic Curve Cryptography, ECC). 使用最广泛的是 RSA 算法 (由发明者 Rivest, Shmir 和 Adleman 姓氏首字母缩写而来) 是著名的公开金钥加密算法, ElGamal 是另一种常用的非对称加密算法。</p>

<p>与对称密钥加密相比, 优点在于无需共享的通用密钥, 解密的私钥不发往任何用户. 即使公钥在网上被截获, 如果没有与其匹配的私钥, 也无法解密, 所截获的公钥是没有任何用处的.</p>

<p>由于公开密钥加密能加密的数据与密钥长度相关, 所以通常不会直接使用公开密钥加密的方式来加密数据, 在数字签名中, RSA 是用来加密/解密原始数据的散列值的(如 MD5, SHA1). 而在加密数据时, 公开密钥加密是用来加密对等加密的密钥的. 下面来看 crypto++ 中具体的加密算法的应用.</p>

<h2>AES</h2>

<p>AES, 高级加密标准 (Advanced Encryption Standard，AES), 在密码学中又称 Rijndael 加密法, 是美国联邦政府采用的一种区块加密标准. 这个标准用来替代原先的 DES, 已经被多方分析且广为全世界所使用. 经过五年的甄选流程, 高级加密标准由美国国家标准与技术研究院 (NIST) 于 2001 年 11 月 26 日发布于 FIPS PUB 197, 并在 2002 年 5 月 26 日成为有效的标准. 2006 年, 高级加密标准已然成为对称密钥加密中最流行的算法之一.</p>

<p>分组加密 (Block cipher, 又称分块加密), 是一种对称密钥算法. 它将明文分成多个等长的模块 (block), 使用确定的算法和对称密钥对每组分别加密解密.</p>

<p>分组加密就要涉及到块密码的工作模式, AES 有 5 种块密码的工作模式, 分别是: 电子密码本 (ECB), 密码块链接 (CBC), 密文反馈 (CFB), 输出反馈 (OFB), 计数器模式(CTR), 各种优缺点详见<a href="http://zh.wikipedia.org/wiki/%E5%9D%97%E5%AF%86%E7%A0%81%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F">块密码的工作模式</a>.</p>

<p>下面是利用 crypto++ 实现 CBC 模式的 AES 加密/解密测试程序</p>

<p>```cpp</p>

<h1>include <iostream></h1>

<h1>include &ldquo;aes.h&rdquo;</h1>

<h1>include &ldquo;modes.h&rdquo;</h1>

<h1>include &ldquo;filters.h&rdquo;</h1>

<h1>include &ldquo;osrng.h&rdquo;</h1>

<h1>include &ldquo;hex.h&rdquo;</h1>

<p>int main(int argc, char* argv[]) {
  using namespace CryptoPP;
  AutoSeededRandomPool r;</p>

<p>  byte key[AES::DEFAULT_KEYLENGTH];
  byte iv[AES::BLOCKSIZE];
  r.GenerateBlock(key, AES::DEFAULT_KEYLENGTH);
  r.GenerateBlock(iv, AES::BLOCKSIZE);</p>

<p>  std::string origin = &ldquo;abcdefghijklmnopqrstuvwxyz&rdquo;;
  std::string ciphertext;</p>

<p>  std::cout &lt;&lt; origin &lt;&lt; &ldquo;\n\n&rdquo;;</p>

<p>  AES::Encryption aes_encryption(key, AES::DEFAULT_KEYLENGTH);
  CBC_Mode_ExternalCipher::Encryption cbc_encryption(aes_encryption, iv);</p>

<p>  StreamTransformationFilter encryptor(cbc_encryption, new StringSink(ciphertext));
  encryptor.Put(reinterpret_cast<const unsigned char*>(origin.c_str()), origin.length());
  encryptor.MessageEnd();</p>

<p>  std::string encoded;
  HexEncoder encoder;</p>

<p>  encoder.Put((byte*)ciphertext.data(), ciphertext.size());
  encoder.MessageEnd();</p>

<p>  word64 encoder_size = encoder.MaxRetrievable();
  if(encoder_size &amp;&amp; encoder_size &lt;= SIZE_MAX) {</p>

<pre><code>  encoded.resize(encoder_size);
  encoder.Get((byte*)encoded.data(), encoded.size());
</code></pre>

<p>  }</p>

<p>  std::cout &lt;&lt; encoded &lt;&lt; &ldquo;\n\n&rdquo;;</p>

<p>  // send encoded to server</p>

<p>  std::string decoded;
  HexDecoder decoder;</p>

<p>  decoder.Put((byte*)encoded.data(), encoded.size());
  decoder.MessageEnd();</p>

<p>  word64 decoder_size = decoder.MaxRetrievable();
  if(decoder_size &amp;&amp; decoder_size &lt;= SIZE_MAX) {</p>

<pre><code>  decoded.resize(decoder_size);
  decoder.Get((byte*)decoded.data(), decoded.size());
</code></pre>

<p>  }</p>

<p>  std::cout &lt;&lt; decoded &lt;&lt; &ldquo;\n\n&rdquo;;</p>

<p>  AES::Decryption aes_decryption(key, AES::DEFAULT_KEYLENGTH);
  CBC_Mode_ExternalCipher::Decryption cbc_decryption(aes_decryption, iv);</p>

<p>  std::string decrypted;
  StreamTransformationFilter decryptor(cbc_decryption, new StringSink(decrypted));
  decryptor.Put(reinterpret_cast<const unsigned char*>(decoded.c_str()), decoded.size());
  decryptor.MessageEnd();</p>

<p>  std::cout &lt;&lt; decrypted &lt;&lt; &ldquo;\n\n&rdquo;;</p>

<p>  return 0;
}
```</p>

<h2>RSA</h2>

<p>RSA 加密算法是一种非对称加密算法. 在公开密钥加密和电子商业中 RSA 被广泛使用. RSA 是 1977 年由罗纳德·李维斯特 (Ron Rivest), 阿迪·萨莫尔 (Adi Shamir) 和伦纳德·阿德曼 (Leonard Adleman) 一起提出的. 当时他们三人都在麻省理工学院工作. RSA 就是他们三人姓氏开头字母拼在一起组成的.</p>

<p>1973 年, 在英国政府通讯总部工作的数学家克利福德·柯克斯 (Clifford Cocks) 在一个内部文件中提出了一个相同的算法, 但他的发现被列入机密, 一直到1997年才被发表.</p>

<p>对极大整数做因数分解的难度决定了 RSA 算法的可靠性. 换言之, 对一极大整数做因数分解愈困难, RSA 算法愈可靠. 尽管如此, 只有一些 RSA 算法的变种被证明为其安全性依赖于因数分解. 假如有人找到一种快速因数分解的算法的话, 那么用 RSA 加密的信息的可靠性就肯定会极度下降. 但找到这样的算法的可能性是非常小的. 今天只有短的 RSA 钥匙才可能被强力方式解破. 到 2008 年为止, 世界上还没有任何可靠的攻击 RSA 算法的方式. 只要其钥匙的长度足够长, 用 RSA 加密的信息实际上是不能被解破的.</p>

<p>下面是利用 crypto++ 实现的 RSA 测试程序</p>

<p>```cpp</p>

<h1>include <iostream></h1>

<h1>include &ldquo;hex.h&rdquo;</h1>

<h1>include &ldquo;osrng.h&rdquo;</h1>

<h1>include &ldquo;rsa.h&rdquo;</h1>

<p>int main(int argc, char* argv[]) {
  using namespace CryptoPP;
  AutoSeededRandomPool r;
  InvertibleRSAFunction params;
  params.GenerateRandomWithKeySize(r, 1024);</p>

<p>  std::string origin = &ldquo;abcdefghijklmnopqrstuvwxyz&rdquo;;
  std::string ciphertext;</p>

<p>  std::cout &lt;&lt; origin &lt;&lt; &ldquo;\n\n&rdquo;;</p>

<p>  RSA::PrivateKey private_key(params);
  RSA::PublicKey public_key(params);</p>

<p>  RSAES_OAEP_SHA_Encryptor e(public_key);
  StringSource(origin, true, new CryptoPP::PK_EncryptorFilter(r, e, new CryptoPP::StringSink(ciphertext)));</p>

<p>   std::string encoded;
  HexEncoder encoder;</p>

<p>  encoder.Put((byte*)ciphertext.data(), ciphertext.size());
  encoder.MessageEnd();</p>

<p>  word64 encoder_size = encoder.MaxRetrievable();
  if(encoder_size &amp;&amp; encoder_size &lt;= SIZE_MAX) {</p>

<pre><code>  encoded.resize(encoder_size);
  encoder.Get((byte*)encoded.data(), encoded.size());
</code></pre>

<p>  }</p>

<p>  std::cout &lt;&lt; encoded &lt;&lt; &ldquo;\n\n&rdquo;;</p>

<p>  // send encoded to server</p>

<p>  std::string decoded;
  HexDecoder decoder;</p>

<p>  decoder.Put((byte*)encoded.data(), encoded.size());
  decoder.MessageEnd();</p>

<p>  word64 decoder_size = decoder.MaxRetrievable();
  if(decoder_size &amp;&amp; decoder_size &lt;= SIZE_MAX) {</p>

<pre><code>  decoded.resize(decoder_size);
  decoder.Get((byte*)decoded.data(), decoded.size());
</code></pre>

<p>  }</p>

<p>  std::cout &lt;&lt; decoded &lt;&lt; &ldquo;\n\n&rdquo;;</p>

<p>  std::string decrypted;
  RSAES_OAEP_SHA_Decryptor d(private_key);
  StringSource(decoded, true, new CryptoPP::PK_DecryptorFilter(r, d, new CryptoPP::StringSink(decrypted)));</p>

<p>  std::cout &lt;&lt; decrypted &lt;&lt; &ldquo;\n\n&rdquo;;</p>

<p>  return 0;
}
```</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.cryptopp.com/">Crypto++ HomePage</a></li>
<li><a href="http://en.wikipedia.org/wiki/Advanced_Encryption_Standard">AES</a></li>
<li><a href="http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation">Block cipher mode of operation</a></li>
<li><a href="http://en.wikipedia.org/wiki/RSA_%28cryptosystem%29">RSA</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html">RSA 算法原理(一)</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html">RSA 算法原理(二)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[返回值类型推导]]></title>
    <link href="http://bitdewy.github.com/blog/2013/11/11/return-type-resolver/"/>
    <updated>2013-11-11T10:21:00+08:00</updated>
    <id>http://bitdewy.github.com/blog/2013/11/11/return-type-resolver</id>
    <content type="html"><![CDATA[<p>模版函数的参数类型可以自动推导, 它可以让我们在调用函数的时候不必写丑陋的<code>&lt;&gt;</code>, 但如果是返回值类型需要自动推导, 似乎就没有那么容易了. 虽然语言本身不支持返回值的类型自动推导, 但我们可以尝试其他的办法来完成这项任务.</p>

<h2>目的</h2>

<p>在使用函数返回值初始化变量或给变量赋值时模版函数能够自动推导出类型.</p>

<h2>例子</h2>

<p>在某些情况下, 明确被初始化的变量类型是有用的. 考虑下面的例子, 我们使用随机数来初始化 STL 容器. 但是我们不知道用户会选择哪个具体的容器类型. 它可能是 <code>std::list</code>, <code>std::vector</code> 或者其他的行为像 STL 容器的自定义类型. 最直接的方法如下所示:</p>

<p>```cpp</p>

<h1>include <list></h1>

<h1>include <vector></h1>

<h1>include <random></h1>

<p>template <class Container>
Container GetRandomN(size_t n) {
  Container c;
  for(size_t i = 0; i &lt; n; ++i) {</p>

<pre><code>c.insert(c.end(), rand());
</code></pre>

<p>  }
  return c;
}</p>

<p>int main () {
  std::list<int> l = GetRandomN&lt;std::list<int> >(10);
  std::vector<long> v = GetRandomN&lt;std::vector<long> >(100);
  return 0;
}
```</p>

<!-- more -->


<p>我们可以注意到, 代码中必须显示的指定返回值的类型, 很显然我们必须写两次返回值类型, 类型声明写一次, 函数调用又写了一次. 返回值类型推导可以帮助我们解决这个问题, 当然 C++11 中的 auto 类型也可以解决.</p>

<h2>解决方案 &amp; 示例代码</h2>

<p>```cpp</p>

<h1>include <list></h1>

<h1>include <set></h1>

<h1>include <vector></h1>

<h1>include <random></h1>

<p>class GetRandomN {
 public:
  GetRandomN(int n = 1) : count(n) {}</p>

<p>  template <class Container>
  operator Container() {</p>

<pre><code>Container c;
for (size_t i = 0; i &lt; count; ++i) {
  c.insert(c.end(), rand()); // push_back is not supported by all standard containers.
}
return c;
</code></pre>

<p>  }
 private:
  size_t count;
};</p>

<p>int main() {
  std::set<int> random_s = GetRandomN(10);
  std::vector<int> random_v = GetRandomN(10);
  std::list<int> random_l = GetRandomN(10);
  return 0;
}
```</p>

<p>类 GetRandomN 有一个构造函数, 以及一个模版的类型隐式转换函数. 初始化的时候, 会产生一个 GetRandomN 类的临时对象, 当赋值给 STL 容器类型时, 编译器会去尝试将对象隐式转换. 而隐式转换的途径就是取寻找隐式转换函数, 这样就完成了返回值自动推导. 有了返回值类型自动推导, 我们就不必手写返回值类型参数了. 唔… 再注意一点, 为了支持 <code>std::set</code> 我们将原始的 <code>push_back</code> 函数改为了 <code>insert</code>.</p>

<p><em>注: 在 C++11 引入 <code>nullptr</code> 之前, 手工实现一个 <code>nullptr</code> 的惯用法就使用了返回值类型推导.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++11中的原子操作 (atomic operation)]]></title>
    <link href="http://bitdewy.github.com/blog/2013/09/02/atomic-operation/"/>
    <updated>2013-09-02T23:34:00+08:00</updated>
    <id>http://bitdewy.github.com/blog/2013/09/02/atomic-operation</id>
    <content type="html"><![CDATA[<p>所谓的原子操作, 取的就是 “原子是最小的, 不可分割的最小个体” 的意义, 它表示在多个线程访问同一个全局资源的时候, 能够确保所有其他的线程都不在同一时间内访问相同的资源. 也就是他确保了在同一时刻只有唯一的线程对这个资源进行访问. 这有点类似互斥对象对共享资源的访问的保护, 但是原子操作更加接近底层, 因而效率更高.</p>

<p>在以往的 C++ 标准中并没有对原子操作进行规定, 我们往往是使用汇编语言, 或者是借助第三方的线程库, 例如 intel 的 pthread 来实现. 在新标准 C++11, 引入了原子操作的概念, 并通过这个新的头文件提供了多种原子操作数据类型, 例如, atomic_bool, atomic_int 等等, 如果我们在多个线程中对这些类型的共享资源进行操作, 编译器将保证这些操作都是原子性的, 也就是说, 确保任意时刻只有一个线程对这个资源进行访问, 编译器将保证, 多个线程访问这个共享资源的正确性. 从而避免了锁的使用, 提高了效率.</p>

<p>我们还是来看一个实际的例子. 假若我们要设计一个广告点击统计程序, 在服务器程序中, 使用多个线程模拟多个用户对广告的点击:</p>

<p>```cpp</p>

<h1>include <iostream></h1>

<h1>include <thread></h1>

<h1>include &lt;time.h></h1>

<p>// 全局的结果数据
long total = 0;
// 点击函数
void click()
{
  for(int i = 0; i &lt; 10000; ++i) {</p>

<pre><code>// 对全局数据进行无锁访问
total += 1;
</code></pre>

<p>  }
}</p>

<p>int main(int argc, char* argv[])
{
  // 计时开始
  clock_t start = clock();
  // 创建100个线程模拟点击统计
  std::thread threads[100];
  for(int i = 0; i &lt; 100; ++i) {</p>

<pre><code>std::thread t(&amp;click);
threads[i].swap(t);
</code></pre>

<p>  }
  for(int i=0; i&lt;100; ++i) {</p>

<pre><code>threads[i].join();
</code></pre>

<p>  }
  // 计时结束
  clock_t finish = clock();
  // 输出结果
  std::cout &lt;&lt; &ldquo;result:&rdquo; &lt;&lt; total &lt;&lt; std::endl;
  std::cout &lt;&lt; &ldquo;duration:&rdquo; &lt;&lt; finish -start &lt;&lt; &ldquo;ms&rdquo; &lt;&lt; std::endl;
  return 0;
}
```</p>

<!-- more -->


<p>执行结果如下:</p>

<blockquote><p>result: 955700</p>

<p>duration: 49ms</p></blockquote>

<p>从执行的结果来看, 这样的方法虽然非常快, 但是结果不正确.</p>

<p>很自然地, 我们会想到使用互斥对象来对全局共享资源的访问进行保护, 于是有了下面的实现:</p>

<p>```cpp
///
std::mutex m;
// 点击函数
void click()
{
  for(int i = 0; i &lt; 10000; ++i) {</p>

<pre><code>// 对全局数据进行无锁访问
std::unique_lock&lt;std::mutex&gt; lk(m);
total += 1;
</code></pre>

<p>  }
}
///
```</p>

<p>运行结果如下:</p>

<blockquote><p>result: 1000000</p>

<p>duration: 32350ms</p></blockquote>

<p>互斥对象的使用, 保证了同一时刻只有唯一的一个线程对这个共享进行访问, 从执行的结果来看, 互斥对象保证了结果的正确性, 但是也有非常大的性能损失, 从刚才的 49ms 变成了现在的 32350ms. 这 TMD 差距也太大了.(感觉有些异常，差距没理由这么大的, 可能是线程太多, CPU 光忙着线程切换了 = =!)</p>

<p>如果是在 C++11 之前, 我们的解决方案也就到此为止了. 但是, C++ 对性能的追求是永无止境的, 他总是想尽一切办法榨干 CPU 的性能. 在 C++11 中, 实现了原子操作的数据类型 (atomic_bool, atomic_int, atomic_long 等等), 对于这些原子数据类型的共享资源的访问, 无需借助 mutex 等锁机制, 也能够实现对共享资源的正确访问.</p>

<p>将原本的 long 类型改为 std::atomic_long 类型即可</p>

<p>```cpp
//long total = 0;</p>

<p>std::atomic_long total;
```</p>

<p>运行结果如下:</p>

<blockquote><p>result: 1000000</p>

<p>duration: 117ms</p></blockquote>

<p>结果正确, 时间上仅仅是不采用任何保护机制时的 3 倍左右, 和使用 mutex 做同步的版本不知差了几个数量级了.</p>

<p>原子操作的实现跟普通数据类型类似, 但是它能够在保证结果正确的前提下, 提供比 mutex 等锁机制更好的性能, 如果我们要访问的共享资源可以用原子数据类型表示, 那么在多线程程序中使用这种新的等价数据类型, 是一个不错的选择.</p>

<p>但值得注意的是, <code>std::atomic</code> 只能作用于基本类型以及 POD 类型上.</p>

<h2>参考</h2>

<ul>
<li><a href="http://en.cppreference.com/w/cpp/atomic/atomic">CppReference.com &ndash; atomic</a></li>
<li><a href="http://channel9.msdn.com/Shows/Going+Deep/Cpp-and-Beyond-2012-Herb-Sutter-atomic-Weapons-1-of-2">C++ and Beyond 2012: Herb Sutter &ndash; atomic&lt;> Weapons</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[类型选择]]></title>
    <link href="http://bitdewy.github.com/blog/2013/07/30/type-selection/"/>
    <updated>2013-07-30T18:26:00+08:00</updated>
    <id>http://bitdewy.github.com/blog/2013/07/30/type-selection</id>
    <content type="html"><![CDATA[<h2>目的</h2>

<p>在编译期间, 根据一些条件, 决定类型.</p>

<h2>动机</h2>

<p>在编译期根据一些信息来做出决议是元编程的一个强大工具. 其中一种就是在编译期决定类型, 比如根据一些列的条件最后决定具体的类型.</p>

<p>例如, 考虑一个 Queue 的实现, 这个模板类有一个静态数组, 模板参数作为这个 Queue 类型的最大容量. Queue 类同时需要存储当前元素的个数, 从 0 开始. 可能的优化方案是用不同的类型, 来存储 size 值. 比如当 Queue 的最大容量小于 256 时, 存储容量的类型是 unsigned char, 当容量小于 65536 时, 存储容量的类型是 unsigned short, 更大的容量时使用 unsigned int 类型. 类型选择可以在这个时候发挥作用.</p>

<h2>解决方案以及代码示例</h2>

<p>一个简单的解决方案是使用 IF 模板. IF 模板有三个模板参数, 第一个参数是编译期的 bool 表达式. 如果表达式为 true 那么第二个模板参数类型将被选中, 否则会选中第三个模板参数. IF 模板由下面的一个模板和一个模板偏特化构成.</p>

<p><code>cpp
template &lt;bool, class L, class R&gt;
struct IF  // primary template
{
  typedef R type;
};
template &lt;class L, class R&gt;
struct IF&lt;true, L, R&gt; // partial specialization
{
  typedef L type;
};
IF&lt;false, int, long&gt;::type i; // is equivalent to long i;
IF&lt;true,  int, long&gt;::type i; // is equivalent to int i;
</code></p>

<!-- more -->


<p>下面就是使用类型选择实现的 Queue 类:</p>

<p>```cpp
template <class T, unsigned int CAPACITY>
class Queue
{
  T array[CAPACITY];
  typename IF&lt;(CAPACITY &lt;= 256),</p>

<pre><code>  unsigned char,
  typename IF&lt;(CAPACITY &lt;= 65536),
              unsigned short,
              unsigned int
             &gt;::type
&gt;::type size;
</code></pre>

<p>  // &hellip;
};
```</p>

<p>模板类 Queue 声明了一个类型为 T 的数组, 数据成员 size 的类型由两个 IF 模板的结果来决定. 注意, 这些比较不是在运行时而是在编译期.</p>

<h2>已知的应用</h2>

<ul>
<li><a href="http://www.boost.org/doc/libs/1_54_0/libs/mpl/doc/index.html">Boost.MPL Library</a></li>
</ul>


<h2>参考</h2>

<ul>
<li>《Modern C++ design》(2.6 型别选择 (type selection)) Andrei Alexandrescu</li>
</ul>

]]></content>
  </entry>
  
</feed>
