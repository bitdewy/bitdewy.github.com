<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: design pattern | Bitdewy]]></title>
  <link href="http://bitdewy.github.com/blog/categories/design-pattern/atom.xml" rel="self"/>
  <link href="http://bitdewy.github.com/"/>
  <updated>2015-01-26T23:04:22+08:00</updated>
  <id>http://bitdewy.github.com/</id>
  <author>
    <name><![CDATA[bitdewy]]></name>
    <email><![CDATA[bitdewy@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Visitor 模式与 boost.variant.static_visitor]]></title>
    <link href="http://bitdewy.github.com/blog/2013/07/15/static-visitor/"/>
    <updated>2013-07-15T00:36:00+08:00</updated>
    <id>http://bitdewy.github.com/blog/2013/07/15/static-visitor</id>
    <content type="html"><![CDATA[<h2>visitor 模式</h2>

<p>visitor 模式是一种将算法与对象结构分离的软件设计模式.</p>

<p>这个模式的基本想法如下: 首先我们拥有一个由许多对象构成的对象结构, 这些对象的类都拥有一个 accept 方法用来接受访问者对象; 访问者是一个接口, 它拥有一个 visit 方法, 这个方法对访问到的对象结构中不同类型的元素作出不同的反应; 在对象结构的一次访问过程中, 我们遍历整个对象结构, 对每一个元素都实施 accept 方法, 在每一个元素的 accept 方法中回调访问者的 visit 方法, 从而使访问者得以处理对象结构的每一个元素. 我们可以针对对象结构设计不同的实在的访问者类来完成不同的操作.</p>

<p>访问者模式使得我们可以在传统的单分派语言 (如 Smalltalk, Java 和 C++) 中模拟双分派技术.</p>

<!-- more -->


<h2>传统的 visitor 模式实现</h2>

<p>```cpp</p>

<h1>include <memory></h1>

<h1>include <iostream></h1>

<h1>include <tuple></h1>

<p>/// original visitor pattern
class Wheel;
class Engine;
class Body;
class Car;</p>

<p>class CarElementVisitor
{
public:
  virtual void visit(const std::shared_ptr<Wheel>&amp; wheel) const = 0;
  virtual void visit(const std::shared_ptr<Engine>&amp; engine) const = 0;
  virtual void visit(const std::shared_ptr<Body>&amp; body) const = 0;
  virtual void visit(const std::shared_ptr<Car>&amp; car) const = 0;
};</p>

<p>class CarElement
{
public:
  virtual void accept(const std::shared_ptr<CarElementVisitor>&amp; visitor) = 0;
};</p>

<p>class Wheel : public CarElement,</p>

<pre><code>          public std::enable_shared_from_this&lt;Wheel&gt;
</code></pre>

<p>{
public:
  virtual void accept(const std::shared_ptr<CarElementVisitor>&amp; visitor)
  {</p>

<pre><code>visitor-&gt;visit(shared_from_this());
</code></pre>

<p>  }
};</p>

<p>class Engine : public CarElement,</p>

<pre><code>           public std::enable_shared_from_this&lt;Engine&gt;
</code></pre>

<p>{
public:
  virtual void accept(const std::shared_ptr<CarElementVisitor>&amp; visitor)
  {</p>

<pre><code>visitor-&gt;visit(shared_from_this());
</code></pre>

<p>  }
};</p>

<p>class Body : public CarElement,</p>

<pre><code>         public std::enable_shared_from_this&lt;Body&gt;
</code></pre>

<p>{
public:
  virtual void accept(const std::shared_ptr<CarElementVisitor>&amp; visitor)
  {</p>

<pre><code>visitor-&gt;visit(shared_from_this());
</code></pre>

<p>  }
};</p>

<p>class Car : public CarElement,</p>

<pre><code>        public std::enable_shared_from_this&lt;Car&gt;
</code></pre>

<p>{
  typedef std::tuple&lt;std::shared_ptr<Wheel>, std::shared_ptr<Engine>, std::shared_ptr<Body> > Elements;</p>

<p>  template &lt;std::size_t> class int_ {};</p>

<p>  template <typename Tuple, std::size_t pos>
  void visit(const std::shared_ptr<CarElementVisitor>&amp; visitor, const Tuple&amp; t, int_<pos>)
  {</p>

<pre><code>visitor-&gt;visit(std::get&lt;std::tuple_size&lt;Tuple&gt;::value - pos&gt;(t));
visit(visitor, t, int_&lt;pos - 1&gt;());
</code></pre>

<p>  }</p>

<p>  template <typename Tuple>
  void visit(const std::shared_ptr<CarElementVisitor>&amp; visitor, const Tuple&amp; t, int_<1>)
  {</p>

<pre><code>visitor-&gt;visit(std::get&lt;std::tuple_size&lt;Tuple&gt;::value - 1&gt;(t));
</code></pre>

<p>  }</p>

<p>  template &lt;typename&hellip; Args>
  void visit(const std::shared_ptr<CarElementVisitor>&amp; visitor, const std::tuple<Args ...>&amp; t)
  {</p>

<pre><code>visit(visitor, t, int_&lt;sizeof...(Args)&gt;());
</code></pre>

<p>  }</p>

<p>public:
  Car()
  {</p>

<pre><code>elements_ = std::make_tuple(std::make_shared&lt;Wheel&gt;(), std::make_shared&lt;Engine&gt;(), std::make_shared&lt;Body&gt;());
</code></pre>

<p>  }</p>

<p>  virtual void accept(const std::shared_ptr<CarElementVisitor>&amp; visitor)
  {</p>

<pre><code>visit(visitor, elements_);
visitor-&gt;visit(shared_from_this());
</code></pre>

<p>  }</p>

<p>private:</p>

<p>  Elements elements_;
};</p>

<p>class PrintVisitor : public CarElementVisitor
{
public:
  virtual void visit(const std::shared_ptr<Wheel>&amp; wheel) const
  {</p>

<pre><code>std::cout &lt;&lt; "void PrintVisitor::visit(std::shared_ptr&lt;Wheel&gt; wheel) const" &lt;&lt; std::endl;
</code></pre>

<p>  }</p>

<p>  virtual void visit(const std::shared_ptr<Engine>&amp; engine) const
  {</p>

<pre><code>std::cout &lt;&lt; "void PrintVisitor::visit(std::shared_ptr&lt;Engine&gt; engine) const" &lt;&lt; std::endl;
</code></pre>

<p>  }</p>

<p>  virtual void visit(const std::shared_ptr<Body>&amp; body) const
  {</p>

<pre><code>std::cout &lt;&lt; "void PrintVisitor::visit(std::shared_ptr&lt;Body&gt; body) const" &lt;&lt; std::endl;
</code></pre>

<p>  }</p>

<p>  virtual void visit(const std::shared_ptr<Car>&amp; car) const
  {</p>

<pre><code>std::cout &lt;&lt; "void PrintVisitor::visit(std::shared_ptr&lt;Car&gt; car) const" &lt;&lt; std::endl;
</code></pre>

<p>  }
};</p>

<p>class OtherVisitor : public CarElementVisitor
{
public:
  virtual void visit(const std::shared_ptr<Wheel>&amp; wheel) const
  {</p>

<pre><code>std::cout &lt;&lt; "void OtherVisitor::visit(std::shared_ptr&lt;Wheel&gt; wheel) const" &lt;&lt; std::endl;
</code></pre>

<p>  }</p>

<p>  virtual void visit(const std::shared_ptr<Engine>&amp; engine) const
  {</p>

<pre><code>std::cout &lt;&lt; "void OtherVisitor::visit(std::shared_ptr&lt;Engine&gt; engine) const" &lt;&lt; std::endl;
</code></pre>

<p>  }</p>

<p>  virtual void visit(const std::shared_ptr<Body>&amp; body) const
  {</p>

<pre><code>std::cout &lt;&lt; "void OtherVisitor::visit(std::shared_ptr&lt;Body&gt; body) const" &lt;&lt; std::endl;
</code></pre>

<p>  }</p>

<p>  virtual void visit(const std::shared_ptr<Car>&amp; car) const
  {</p>

<pre><code>std::cout &lt;&lt; "void OtherVisitor::visit(std::shared_ptr&lt;Car&gt; car) const" &lt;&lt; std::endl;
</code></pre>

<p>  }
};</p>

<p>int main()
{
  std::shared_ptr<CarElement> car(std::make_shared<Car>());
  car->accept(std::make_shared<PrintVisitor>());
  car->accept(std::make_shared<OtherVisitor>());
  return 0;
}
```</p>

<h2>boost.variant.static_visitor 的实现</h2>

<p>```cpp</p>

<h1>include <iostream></h1>

<h1>include &lt;boost/variant.hpp></h1>

<h1>include &lt;boost/variant/static_visitor.hpp></h1>

<h1>include &lt;boost/variant/apply_visitor.hpp></h1>

<p>class Wheel {};
class Engine {};
class Body {};
class Car {};</p>

<p>/// boost static visitor</p>

<p>typedef boost::variant&lt;Wheel, Engine, Body, Car> CarElement;</p>

<p>class PrintVisitor : public boost::static_visitor<void>
{
public:
  void operator()(const Wheel&amp; wheel) const
  {</p>

<pre><code>std::cout &lt;&lt; "void PrintStaticVisitor::operator()(const Wheel&amp;) const" &lt;&lt; std::endl;
</code></pre>

<p>  }</p>

<p>  void operator()(const Engine&amp; engine) const
  {</p>

<pre><code>std::cout &lt;&lt; "void PrintStaticVisitor::operator()(const Engine&amp;) const" &lt;&lt; std::endl;
</code></pre>

<p>  }</p>

<p>  void operator()(const Body&amp; body) const
  {</p>

<pre><code>std::cout &lt;&lt; "void PrintStaticVisitor::operator()(const Body&amp;) const" &lt;&lt; std::endl;
</code></pre>

<p>  }</p>

<p>  void operator()(const Car&amp; car) const
  {</p>

<pre><code>/// bla bla bla
std::cout &lt;&lt; "void PrintStaticVisitor::operator()(const Car&amp;) const" &lt;&lt; std::endl;
</code></pre>

<p>  }
};</p>

<p>class OtherVisitor : public boost::static_visitor<void>
{
public:
  void operator()(const Wheel&amp; wheel) const
  {</p>

<pre><code>std::cout &lt;&lt; "void OtherStaticVisitor::operator()(const Wheel&amp;) const" &lt;&lt; std::endl;
</code></pre>

<p>  }</p>

<p>  void operator()(const Engine&amp; engine) const
  {</p>

<pre><code>std::cout &lt;&lt; "void OtherStaticVisitor::operator()(const Engine&amp;) const" &lt;&lt; std::endl;
</code></pre>

<p>  }</p>

<p>  void operator()(const Body&amp; body) const
  {</p>

<pre><code>std::cout &lt;&lt; "void OtherStaticVisitor::operator()(const Body&amp;) const" &lt;&lt; std::endl;
</code></pre>

<p>  }</p>

<p>  void operator()(const Car&amp; car) const
  {</p>

<pre><code>/// bla bla bla
std::cout &lt;&lt; "void OtherStaticVisitor::operator()(const Car&amp;) const" &lt;&lt; std::endl;
</code></pre>

<p>  }
};</p>

<p>int main()
{
  CarElement x = Car();
  PrintVisitor print_visitor;
  OtherVisitor other_visitor;
  boost::apply_visitor(print_visitor, x);
  boost::apply_visitor(other_visitor, x);</p>

<p>  return 0;
}
```</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.boost.org/doc/libs/1_54_0/doc/html/variant/reference.html#header.boost.variant.static_visitor_hpp">boost.variant.static_visitor</a></li>
<li><a href="http://en.wikipedia.org/wiki/Visitor_pattern">维基百科: visitor 模式</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[模板方法模式]]></title>
    <link href="http://bitdewy.github.com/blog/2013/05/28/template-method-pattern/"/>
    <updated>2013-05-28T01:26:00+08:00</updated>
    <id>http://bitdewy.github.com/blog/2013/05/28/template-method-pattern</id>
    <content type="html"><![CDATA[<h2>意图</h2>

<ol>
<li>定义一个操作中的算法骨架, 将一些步骤延迟到子类中定义. 模板方法模式, 可以让子类不改变算法的结构重新定义算法的某些步骤.</li>
<li>基类声明算法的“占位符”, 子类来实现这个“占位符”.</li>
</ol>


<h2>讨论</h2>

<p>组件设计者决定哪些算法的步骤是不变的? 哪些是会变化的? 不变的步骤在抽象类中直接实现, 可能变化的步骤给出默认的实现, 或者完全不实现. 变化的部分代表“hooks”, 或占位符. 可以在使用组件时, 在派生类中实现.</p>

<p>组件设计者设计算法的步骤, 步骤的顺序, 但同时允许用户来扩展或替换算法中的某些步骤.</p>

<p>模板方法模式在框架中的使用非常广泛. 每个框架都会实现框架的主要结构, 然后定义一系列的“占位符”给用户, 让用户有机会来自定义一些操作.这么做时, 框架就变成了核心部分, 用户自定义的操作就会变得容易. 这使得控制结构发生反转, 这个方式有一个很好的名字, “好莱坞原则”——“不要给我们打电话, 我们会打电话给你.”</p>

<!-- more  -->


<h2>结构</h2>

<p><img src="https://qhphgq.bay.livefilestore.com/y2pBx_PXPtSilwtV5sYskGDPJkXjmpbdLnwAeT9H_7drKPs4-4_-pm3OfDw58eFEjaFRaa2LSKhbnJODUkyO8CpuQRq8iF306c3KF6Ix_M1zWA/image002.gif" alt="" /></p>

<p>template_method() 的实现如下: 调用 step_one(), 调用 step_two(), 然后调用 step_three(). step_two() 是一个 “hook” 方法——一个占位符. 它在基类中声明, 然后在派生类中实现. 框架中使用模板方法模式非常的频繁. 所有可重用的代码都定义在框架的基类中, 框架的用户可以通过派生类来定制一些想要的行为.</p>

<p><img src="https://qhphgq.bay.livefilestore.com/y2pMCc56J8x2oBUDmOTnSI3RIm-N5Gtpyj355-us-8Rj6CwVbNzQfiEJyprTSAXmCS8rG0MbCE-qwP-Y65dPUdVWyXU8V2FC4IWhzy_2WBvDZA/image003.gif" alt="" /></p>

<h2>做法</h2>

<ol>
<li>检测算法, 决定哪些步骤是标准的通用的, 哪些是特有的.</li>
<li>定义一个抽象类, 用来实现依赖的反转.</li>
<li>将算法的壳以及所有的标准（公共）的步骤移到基类中.</li>
<li>在基类中给那些需要不同实现的步骤定义一个占位符或者“hook”方法, 这些方法可以有默认实现, 也可以完全没有. (C++中的纯虚函数, Java中的抽象方法）</li>
<li>在模板方法中调用这些“占位符”.</li>
<li>所有现有的类都继承于现在的抽象类.</li>
<li>将基类中已经实现的现有的类中的细节全部移除.</li>
<li>那些不同的部分仍然留在这些派生类中，用来实现每个派生类中不同的操作.</li>
</ol>


<h2>经验</h2>

<p>除了粒度的区别之外, 策略模式与模板方法模式非常类似.
模板方法使用继承来改变算法的某个部分, 而策略模式改变整个算法.
策略模式改变单个对象的逻辑. 模板方法修改了整个类的逻辑.
工厂方法模式是一个特化的模板方法模式.</p>

<h2>例子</h2>

<p>```cpp</p>

<h1>include <iostream></h1>

<p>using namespace std;
class Base {</p>

<pre><code>void a() { cout &lt;&lt; "a  "; }
void c() { cout &lt;&lt; "c  "; }
void e() { cout &lt;&lt; "e  "; }

// 2. Steps requiring peculiar implementations are "placeholders" in base class
virtual void ph1() = 0;
virtual void ph2() = 0;
</code></pre>

<p>public:</p>

<pre><code>// 1. Standardize the skeleton of an algorithm in a base class "template method"
void execute() {
    a();
    ph1();
    c();
    ph2();
    e();
}
</code></pre>

<p>};</p>

<p>class One: public Base {</p>

<pre><code>// 3. Derived classes implement placeholder methods
/*virtual*/void ph1() { cout &lt;&lt; "b  "; }
/*virtual*/void ph2() { cout &lt;&lt; "d  "; }
</code></pre>

<p>};</p>

<p>class Two: public Base {</p>

<pre><code>/*virtual*/void ph1() { cout &lt;&lt; "2  "; }
/*virtual*/void ph2() { cout &lt;&lt; "4  "; }
</code></pre>

<p>};</p>

<p>int main() {</p>

<pre><code>Base* array[] = { &amp;One(), &amp;Two() };
for (int i = 0; i &lt; 2; i++) {
    array[i]-&gt;execute();
    cout &lt;&lt; '\n';
}
return 0;
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
