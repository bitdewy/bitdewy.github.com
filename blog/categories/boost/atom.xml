<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: boost | Bitdewy]]></title>
  <link href="http://bitdewy.github.com/blog/categories/boost/atom.xml" rel="self"/>
  <link href="http://bitdewy.github.com/"/>
  <updated>2013-11-23T02:23:31+08:00</updated>
  <id>http://bitdewy.github.com/</id>
  <author>
    <name><![CDATA[bitdewy]]></name>
    <email><![CDATA[bitdewy@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Visitor 模式与 boost.variant.static_visitor]]></title>
    <link href="http://bitdewy.github.com/blog/2013/07/15/static-visitor/"/>
    <updated>2013-07-15T00:36:00+08:00</updated>
    <id>http://bitdewy.github.com/blog/2013/07/15/static-visitor</id>
    <content type="html"><![CDATA[<h2>visitor 模式</h2>

<p>visitor 模式是一种将算法与对象结构分离的软件设计模式.</p>

<p>这个模式的基本想法如下: 首先我们拥有一个由许多对象构成的对象结构, 这些对象的类都拥有一个 accept 方法用来接受访问者对象; 访问者是一个接口, 它拥有一个 visit 方法, 这个方法对访问到的对象结构中不同类型的元素作出不同的反应; 在对象结构的一次访问过程中, 我们遍历整个对象结构, 对每一个元素都实施 accept 方法, 在每一个元素的 accept 方法中回调访问者的 visit 方法, 从而使访问者得以处理对象结构的每一个元素. 我们可以针对对象结构设计不同的实在的访问者类来完成不同的操作.</p>

<p>访问者模式使得我们可以在传统的单分派语言 (如 Smalltalk, Java 和 C++) 中模拟双分派技术.</p>

<!-- more -->


<h2>传统的 visitor 模式实现</h2>

<p>```cpp</p>

<h1>include <memory></h1>

<h1>include <iostream></h1>

<h1>include <tuple></h1>

<p>/// original visitor pattern
class Wheel;
class Engine;
class Body;
class Car;</p>

<p>class CarElementVisitor
{
public:
  virtual void visit(const std::shared_ptr<Wheel>&amp; wheel) const = 0;
  virtual void visit(const std::shared_ptr<Engine>&amp; engine) const = 0;
  virtual void visit(const std::shared_ptr<Body>&amp; body) const = 0;
  virtual void visit(const std::shared_ptr<Car>&amp; car) const = 0;
};</p>

<p>class CarElement
{
public:
  virtual void accept(const std::shared_ptr<CarElementVisitor>&amp; visitor) = 0;
};</p>

<p>class Wheel : public CarElement,</p>

<pre><code>          public std::enable_shared_from_this&lt;Wheel&gt;
</code></pre>

<p>{
public:
  virtual void accept(const std::shared_ptr<CarElementVisitor>&amp; visitor)
  {</p>

<pre><code>visitor-&gt;visit(shared_from_this());
</code></pre>

<p>  }
};</p>

<p>class Engine : public CarElement,</p>

<pre><code>           public std::enable_shared_from_this&lt;Engine&gt;
</code></pre>

<p>{
public:
  virtual void accept(const std::shared_ptr<CarElementVisitor>&amp; visitor)
  {</p>

<pre><code>visitor-&gt;visit(shared_from_this());
</code></pre>

<p>  }
};</p>

<p>class Body : public CarElement,</p>

<pre><code>         public std::enable_shared_from_this&lt;Body&gt;
</code></pre>

<p>{
public:
  virtual void accept(const std::shared_ptr<CarElementVisitor>&amp; visitor)
  {</p>

<pre><code>visitor-&gt;visit(shared_from_this());
</code></pre>

<p>  }
};</p>

<p>class Car : public CarElement,</p>

<pre><code>        public std::enable_shared_from_this&lt;Car&gt;
</code></pre>

<p>{
  typedef std::tuple&lt;std::shared_ptr<Wheel>, std::shared_ptr<Engine>, std::shared_ptr<Body> > Elements;</p>

<p>  template &lt;std::size_t> class int_ {};</p>

<p>  template <typename Tuple, std::size_t pos>
  void visit(const std::shared_ptr<CarElementVisitor>&amp; visitor, const Tuple&amp; t, int_<pos>)
  {</p>

<pre><code>visitor-&gt;visit(std::get&lt;std::tuple_size&lt;Tuple&gt;::value - pos&gt;(t));
visit(visitor, t, int_&lt;pos - 1&gt;());
</code></pre>

<p>  }</p>

<p>  template <typename Tuple>
  void visit(const std::shared_ptr<CarElementVisitor>&amp; visitor, const Tuple&amp; t, int_<1>)
  {</p>

<pre><code>visitor-&gt;visit(std::get&lt;std::tuple_size&lt;Tuple&gt;::value - 1&gt;(t));
</code></pre>

<p>  }</p>

<p>  template &lt;typename&hellip; Args>
  void visit(const std::shared_ptr<CarElementVisitor>&amp; visitor, const std::tuple<Args ...>&amp; t)
  {</p>

<pre><code>visit(visitor, t, int_&lt;sizeof...(Args)&gt;());
</code></pre>

<p>  }</p>

<p>public:
  Car()
  {</p>

<pre><code>elements_ = std::make_tuple(std::make_shared&lt;Wheel&gt;(), std::make_shared&lt;Engine&gt;(), std::make_shared&lt;Body&gt;());
</code></pre>

<p>  }</p>

<p>  virtual void accept(const std::shared_ptr<CarElementVisitor>&amp; visitor)
  {</p>

<pre><code>visit(visitor, elements_);
visitor-&gt;visit(shared_from_this());
</code></pre>

<p>  }</p>

<p>private:</p>

<p>  Elements elements_;
};</p>

<p>class PrintVisitor : public CarElementVisitor
{
public:
  virtual void visit(const std::shared_ptr<Wheel>&amp; wheel) const
  {</p>

<pre><code>std::cout &lt;&lt; "void PrintVisitor::visit(std::shared_ptr&lt;Wheel&gt; wheel) const" &lt;&lt; std::endl;
</code></pre>

<p>  }</p>

<p>  virtual void visit(const std::shared_ptr<Engine>&amp; engine) const
  {</p>

<pre><code>std::cout &lt;&lt; "void PrintVisitor::visit(std::shared_ptr&lt;Engine&gt; engine) const" &lt;&lt; std::endl;
</code></pre>

<p>  }</p>

<p>  virtual void visit(const std::shared_ptr<Body>&amp; body) const
  {</p>

<pre><code>std::cout &lt;&lt; "void PrintVisitor::visit(std::shared_ptr&lt;Body&gt; body) const" &lt;&lt; std::endl;
</code></pre>

<p>  }</p>

<p>  virtual void visit(const std::shared_ptr<Car>&amp; car) const
  {</p>

<pre><code>std::cout &lt;&lt; "void PrintVisitor::visit(std::shared_ptr&lt;Car&gt; car) const" &lt;&lt; std::endl;
</code></pre>

<p>  }
};</p>

<p>class OtherVisitor : public CarElementVisitor
{
public:
  virtual void visit(const std::shared_ptr<Wheel>&amp; wheel) const
  {</p>

<pre><code>std::cout &lt;&lt; "void OtherVisitor::visit(std::shared_ptr&lt;Wheel&gt; wheel) const" &lt;&lt; std::endl;
</code></pre>

<p>  }</p>

<p>  virtual void visit(const std::shared_ptr<Engine>&amp; engine) const
  {</p>

<pre><code>std::cout &lt;&lt; "void OtherVisitor::visit(std::shared_ptr&lt;Engine&gt; engine) const" &lt;&lt; std::endl;
</code></pre>

<p>  }</p>

<p>  virtual void visit(const std::shared_ptr<Body>&amp; body) const
  {</p>

<pre><code>std::cout &lt;&lt; "void OtherVisitor::visit(std::shared_ptr&lt;Body&gt; body) const" &lt;&lt; std::endl;
</code></pre>

<p>  }</p>

<p>  virtual void visit(const std::shared_ptr<Car>&amp; car) const
  {</p>

<pre><code>std::cout &lt;&lt; "void OtherVisitor::visit(std::shared_ptr&lt;Car&gt; car) const" &lt;&lt; std::endl;
</code></pre>

<p>  }
};</p>

<p>int main()
{
  std::shared_ptr<CarElement> car(std::make_shared<Car>());
  car->accept(std::make_shared<PrintVisitor>());
  car->accept(std::make_shared<OtherVisitor>());
  return 0;
}
```</p>

<h2>boost.variant.static_visitor 的实现</h2>

<p>```cpp</p>

<h1>include <iostream></h1>

<h1>include &lt;boost/variant.hpp></h1>

<h1>include &lt;boost/variant/static_visitor.hpp></h1>

<h1>include &lt;boost/variant/apply_visitor.hpp></h1>

<p>class Wheel {};
class Engine {};
class Body {};
class Car {};</p>

<p>/// boost static visitor</p>

<p>typedef boost::variant&lt;Wheel, Engine, Body, Car> CarElement;</p>

<p>class PrintVisitor : public boost::static_visitor<void>
{
public:
  void operator()(const Wheel&amp; wheel) const
  {</p>

<pre><code>std::cout &lt;&lt; "void PrintStaticVisitor::operator()(const Wheel&amp;) const" &lt;&lt; std::endl;
</code></pre>

<p>  }</p>

<p>  void operator()(const Engine&amp; engine) const
  {</p>

<pre><code>std::cout &lt;&lt; "void PrintStaticVisitor::operator()(const Engine&amp;) const" &lt;&lt; std::endl;
</code></pre>

<p>  }</p>

<p>  void operator()(const Body&amp; body) const
  {</p>

<pre><code>std::cout &lt;&lt; "void PrintStaticVisitor::operator()(const Body&amp;) const" &lt;&lt; std::endl;
</code></pre>

<p>  }</p>

<p>  void operator()(const Car&amp; car) const
  {</p>

<pre><code>/// bla bla bla
std::cout &lt;&lt; "void PrintStaticVisitor::operator()(const Car&amp;) const" &lt;&lt; std::endl;
</code></pre>

<p>  }
};</p>

<p>class OtherVisitor : public boost::static_visitor<void>
{
public:
  void operator()(const Wheel&amp; wheel) const
  {</p>

<pre><code>std::cout &lt;&lt; "void OtherStaticVisitor::operator()(const Wheel&amp;) const" &lt;&lt; std::endl;
</code></pre>

<p>  }</p>

<p>  void operator()(const Engine&amp; engine) const
  {</p>

<pre><code>std::cout &lt;&lt; "void OtherStaticVisitor::operator()(const Engine&amp;) const" &lt;&lt; std::endl;
</code></pre>

<p>  }</p>

<p>  void operator()(const Body&amp; body) const
  {</p>

<pre><code>std::cout &lt;&lt; "void OtherStaticVisitor::operator()(const Body&amp;) const" &lt;&lt; std::endl;
</code></pre>

<p>  }</p>

<p>  void operator()(const Car&amp; car) const
  {</p>

<pre><code>/// bla bla bla
std::cout &lt;&lt; "void OtherStaticVisitor::operator()(const Car&amp;) const" &lt;&lt; std::endl;
</code></pre>

<p>  }
};</p>

<p>int main()
{
  CarElement x = Car();
  PrintVisitor print_visitor;
  OtherVisitor other_visitor;
  boost::apply_visitor(print_visitor, x);
  boost::apply_visitor(other_visitor, x);</p>

<p>  return 0;
}
```</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.boost.org/doc/libs/1_54_0/doc/html/variant/reference.html#header.boost.variant.static_visitor_hpp">boost.variant.static_visitor</a></li>
<li><a href="http://en.wikipedia.org/wiki/Visitor_pattern">维基百科: visitor 模式</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
