<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++11 | Bitdewy]]></title>
  <link href="http://bitdewy.github.com/blog/categories/c-plus-plus-11/atom.xml" rel="self"/>
  <link href="http://bitdewy.github.com/"/>
  <updated>2013-10-02T15:25:55+08:00</updated>
  <id>http://bitdewy.github.com/</id>
  <author>
    <name><![CDATA[bitdewy]]></name>
    <email><![CDATA[bitdewy@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C++11 完美转发]]></title>
    <link href="http://bitdewy.github.com/blog/2013/07/08/cpp11-perfect-forward/"/>
    <updated>2013-07-08T22:09:00+08:00</updated>
    <id>http://bitdewy.github.com/blog/2013/07/08/cpp11-perfect-forward</id>
    <content type="html"><![CDATA[<h2>动机</h2>

<p>在泛型编码中经常出现的一个问题是: 如何将一组参数原封不动的转发给另一个函数? 这里的原封不动指的是: 保持参数的左值 (右值), const (non-const) 属性不变.</p>

<h2>C++03 中参数转发存在的问题</h2>

<p>下面来看一个例子, 对于表达式 <code>E(a, b, …, c)</code> 我们希望它与 <code>f(a, b, …, c)</code> 完全等价. 在 C++03 中这是不可能的. 下面是几种设计方案, 但所有的都会在某些条件下失效.</p>

<p>最简单的, 使用引用参数:</p>

<p>```cpp
template <typename A, typename B, typename C>
void f(A&amp; a, B&amp; b, C&amp; c) {</p>

<pre><code>E(a, b, c);
</code></pre>

<p>}
```</p>

<p>很遗憾, 函数 f 无法处理临时变量, 例如 <code>f(1, 2, 3)</code>; 会编译失败. 这三个参数都无法绑定到引用.</p>

<p>再来看看 const 引用:</p>

<p>```cpp
template <typename A, typename B, typename C>
void f(const A&amp; a, const B&amp; b, const C&amp; c) {</p>

<pre><code>E(a, b, c);
</code></pre>

<p>}
```</p>

<!-- more -->


<p>这解决了上面的问题, 但是又引入了新的问题, 现在我们无法让 E 接收 non-const 参数了, 下面的代码也会产生一个编译失败.</p>

<p><code>cpp
int i = 1, j = 2, k = 3;
void E(int&amp;, int&amp;, int&amp;);
f(i, j, k); // oops! E cannot modify these
</code></p>

<p>嗯, 再来个尝试, 解决上面的问题, 我们接收 const 引用, 然后使用 const_cast 来去掉 const 属性.</p>

<p>```cpp
template <typename A, typename B, typename C>
void f(const A&amp; a, const B&amp; b, const C&amp; c) {</p>

<pre><code>E(const_cast&lt;A&amp;&gt;(a), const_cast&lt;B&amp;&gt;(b), const_cast&lt;C&amp;&gt;(c));
</code></pre>

<p>}
```</p>

<p>最后来终极解决方案吧, 利用重载, 根据重载决议, 我们可以使用 const 引用和 non-const 引用来进行参数重载, 对于上面的例子, 我们的实现如下:</p>

<p>```cpp
template <typename A, typename B, typename C>
void f(A&amp; a, B&amp; b, C&amp; c);</p>

<p>template <typename A, typename B, typename C>
void f(const A&amp; a, B&amp; b, C&amp; c);</p>

<p>template <typename A, typename B, typename C>
void f(A&amp; a, const B&amp; b, C&amp; c);</p>

<p>template <typename A, typename B, typename C>
void f(A&amp; a, B&amp; b, const C&amp; c);</p>

<p>template <typename A, typename B, typename C>
void f(const A&amp; a, const B&amp; b, C&amp; c);</p>

<p>template <typename A, typename B, typename C>
void f(const A&amp; a, B&amp; b, const C&amp; c);</p>

<p>template <typename A, typename B, typename C>
void f(A&amp; a, const B&amp; b, const C&amp; c);</p>

<p>template <typename A, typename B, typename C>
void f(const A&amp; a, const B&amp; b, const C&amp; c);
```</p>

<p>n 个参数的函数, 就需要 2<sup>n</sup> 个重载版本, 这太恐怖了, 我们非常需要自动完成这些工作. 这个问题在 C++11 中的到了完美的解决.</p>

<h2>完美转发</h2>

<p>C++11 新标准给了我们修复这个问题的机会 (这里有一个破坏性的解决方案, 虽然解决了完美转发的问题, 但是破坏了现有的类型推导规则<a href="http://stackoverflow.com/questions/3591832/perfect-forwarding-in-c03/3591909#3591909">《Perfect Forwarding in C++03》</a>).</p>

<p>C++11 中引入了新的概念, 右值引用. 我们可以在不破坏现有代码的情况下, 定义右值引用的推导规则, 来解决完美转发的问题.</p>

<p>看下面的表格, (TR 表示 T 引用类型)</p>

<p>```cpp
TR   R</p>

<p>T&amp;   &amp;  &ndash;> T&amp;  // lvalue reference to cv TR &ndash;> lvalue reference to T
T&amp;   &amp;&amp; &ndash;> T&amp;  // rvalue reference to cv TR &ndash;> TR (lvalue reference to T)
T&amp;&amp;  &amp;  &ndash;> T&amp;  // lvalue reference to cv TR &ndash;> lvalue reference to T
T&amp;&amp;  &amp;&amp; &ndash;> T&amp;&amp; // rvalue reference to cv TR &ndash;> TR (rvalue reference to T)
```</p>

<p>然后, 模板参数推导时, 如果参数是左值, 那么就推导为左值引用. 否则使用正常的类型推导. 这里又引入了一个新的概念, “全局引用” (universal references), 具体细节详见: <a href="http://channel9.msdn.com/Shows/Going+Deep/Cpp-and-Beyond-2012-Scott-Meyers-Universal-References-in-Cpp11">C++ and Beyond 2012: Scott Meyers &ndash; Universal References in C++11</a></p>

<p>为什么这样就能解决问题? 因为我们保持了参数的类型: 如果参数是一个左值, 我们得到的是左值引用的参数, 否则我们得到的是右值引用类型的参数, 看下面的代码:</p>

<p>```cpp
template <typename T>void deduce(T&amp;&amp; x);</p>

<p>int i;
deduce(i); // deduce&lt;int&amp;>(int&amp; &amp;&amp;) &ndash;> deduce&lt;int&amp;>(int&amp;)
deduce(1); // deduce<int>(int&amp;&amp;)
```</p>

<p>最后就是要做“转发”了. 需要注意的是, 在函数内参数类型是一个左值类型.</p>

<p>```cpp
void foo(int&amp;);</p>

<p>template <typename T>
void deduce(T&amp;&amp; x){</p>

<pre><code>foo(x); // fine, foo can refer to x
</code></pre>

<p>}</p>

<p>deduce(1); // okay, foo operates on x which has a value of 1
```</p>

<p>这还不足够. foo 需要拿到和 deduce 一样的参数类型, 解决方案如下.</p>

<p><code>cpp
static_cast&lt;T&amp;&amp;&gt;(x);
</code></p>

<p>上面这行代码做了什么呢? 我们在 deduce 函数中, 且我们接收了一个左值类型的参数, 这意味着 T 是 A&amp; 类型, 经过静态类型转换 A&amp; &amp;&amp; 仍然是 A&amp; 类型. 因此, 加入 x 以及是一个 A&amp; 类型, 那么我们什么也没有做, 它仍然是一个左值引用类型.</p>

<p>当我们接收的是一个右值, T 就是 A 类型, 因此我们转换后的类型为 A&amp;&amp;. 转换后的类型是一个右值表达式, 这样就不会再作为左值参数了. 我们保持住了参数的类型. 将上面的组合到一起, 我们就得到了“完美转发”:</p>

<p>```cpp
template <typename A>
void f(A&amp;&amp; a) {</p>

<pre><code>E(static_cast&lt;A&amp;&amp;&gt;(a));
</code></pre>

<p>}
```</p>

<p>当 f 接收到一个左值, 那么 E 也接收一个左值, 当 f 接收的是一个右值, 那么 E 接受到的也是一个右值, 完美了.</p>

<p>当然, 上面的代码是有一点丑陋. <code>static_cast&lt;T&amp;&amp;&gt;</code> 古怪而且不容易记住. 标准库中提供了一个工具函数, 叫做 forward, 它所做的事情与类型转换完全一致.</p>

<p><code>cpp
std::forward&lt;A&gt;(a);
// is the same as
static_cast&lt;A&amp;&amp;&gt;(a);
</code></p>

<h2>参考</h2>

<ul>
<li><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1385.htm">C++标准提案(N1385)：The Forwarding Problem: Arguments</a></li>
<li><a href="http://blog.csdn.net/pongba/article/details/1697636">《C++0x漫谈》系列之：右值引用(或“move语意与完美转发”)(下)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++11 右值引用]]></title>
    <link href="http://bitdewy.github.com/blog/2013/07/02/cpp11-rvalue-ref/"/>
    <updated>2013-07-02T22:49:00+08:00</updated>
    <id>http://bitdewy.github.com/blog/2013/07/02/cpp11-rvalue-ref</id>
    <content type="html"><![CDATA[<h2>什么是右值引用?</h2>

<p>在一般情况下, C++ 不把表达式的左值属性作为类型的一部分, 比如下面的变量声明:</p>

<p><code>cpp
int n;
</code></p>

<p>那么变量 n 的类型是 int. 另外常量 3 也是 int 类型. 虽然他们有相同的类型, 不过这并不是说 n 和 3 总是可以互换的. 比如下面的代码:</p>

<p><code>cpp
int&amp; r = n;  // OK
int&amp; s = 3;  // Error
</code></p>

<p>这是因为标准中规定, 当定义一个引用时, 我们必须使用一个左值来初始化它. 在上面的代码中, n 是一个左值, 而 3 不是. 所以我们不能用 3 来初始化 s. 这个规定可以帮助编译器来捕捉错误, 比如下面的代码:</p>

<p><code>cpp
std::cin &gt;&gt; 3;  // equals std::cin.operator&gt;&gt;(3);
</code></p>

<p>简单的说, 上面的代码调用了 std::cin 的名为 operator>> 的成员函数, 并使用 3 作为参数. operator>> 是重载函数, 虽然它有接受一个 int&amp; 参数的重载版本, 但是没有能接受一个简单的 int 常量, 或者 int 右值作为参数的重载. 因此, 编译器会检查出我们无法使用 int 的右值作为参数来调用 operator>>.</p>

<!-- more -->


<p>C++11 扩展了引用的概念, 增加了右值引用. 右值引用也是一个引用, 但与普通的引用不同, 它只能绑定到右值上. 下面是一个右值引用的声明:</p>

<p><code>cpp
int&amp;&amp; t = 3;
</code></p>

<p>一个普通的引用只能绑定左值, 一个右值引用只能绑定到右值, 也就是说如果我们写了下面的代码, 编译器会报一个错误.</p>

<p><code>cpp
int&amp;&amp; t = n;    // Error: n is an lvalue
</code></p>

<p>右值引用是一个有趣的组合, 虽然你只能绑定右值到右值引用, 但是你使用时它却是一个左值.</p>

<p>例如下面的代码:</p>

<p><code>cpp
int&amp;&amp; t = 3;
++t;
</code></p>

<p>通常情况下, 程序员不能修改右值. 但是通过右值引用, 获得了左值, 这样我们就能修改它的值了. 另外, 右值在通过右值引用绑定之后, 这个右值就不在可访问, 它使用了转移语义来代替拷贝操作.</p>

<p>定义一个接收右值引用参数的函数, 那么函数就会使用转移语义来替代拷贝操作. 但是这样会禁止接收左值参数.</p>

<p><code>cpp
void foo(int&amp;&amp;);
foo(42);        // OK;
int n;
foo(n);         // Error: n is an lvalue
</code></p>

<p>我们当然可以定义一个左值的版本来解决上面的问题:</p>

<p><code>cpp
void bar(int&amp;&amp;);
void bar(const int&amp;);
bar(42);             // calls bar(int&amp;&amp;)
int n;
bar(n);               // calls bar(const int&amp;)
</code></p>

<p>这个技术有个值得记住的地方是, 通过 const 引用和右值引用的两个重载版本, 你告诉了编译器哪个修改参数是安全的, 哪个不是. 此外, 编译器在编译期就决定了使用哪个, 从而避免了运行时的开销.</p>

<h2>Move 语义</h2>

<p>右值引用的引入, 从语言层面提升了性能, 提高了内存与时间上的效率.</p>

<p>在 C++03 及之前的标准中, 临时对象 (称为右值 &ldquo;R-values&rdquo;, 位于赋值运算符之右) 无法被改变, 在 C 中亦同 (且被视为无法和 const T&amp; 做出区分). 虽然在某些情况下临时对象的确会被改变, 甚至也被视为是一个有用的漏洞.</p>

<p>C++11 增加一个新的非常数引用 (reference) 类型, 称作右值引用 (R-value reference), 标记为 <code>T&amp;&amp;</code>. 右值引用所引用的临时对象可以在该临时对象被初始化之后做修改, 这是为了允许 move 语义.</p>

<p>C++03 性能上被长期被诟病的其中之一, 就是其耗时且不必要的深度拷贝. 深度拷贝会发生在当对象是以传值的方式传递. 举例而言, <code>std::vector&lt;T&gt;</code> 是内部保存了 C-style 数组的一个包装, 如果一个 <code>std::vector&lt;T&gt;</code> 的临时对象被建构或是从函数返回, 要将其存储只能通过生成新的 <code>std::vector&lt;T&gt;</code>并且把该临时对象所有的数据复制进去. 该临时对象和其拥有的內存会被摧毁. (为了讨论上的方便，这里忽略返回值优化)</p>

<p>在 C++11 中, 一个 <code>std::vector</code> 的 &ldquo;move 构造函数&rdquo; 对某个 vector 的右值引用可以单纯地从右值复制其内部 C-style 数组的指针到新的 vector, 然后留下空的右值. 这个操作不需要数组的复制, 而且空的临时对象的析构也不会摧毁内存. 传回 vector 临时对象的函数不需要显式地传回 <code>std::vector&lt;T&gt;&amp;&amp;</code>. 如果 vector 没有 move 构造函数, 那么复制构造函数将被调用, 以 <code>const std::vector&lt;T&gt; &amp;</code> 的正常形式. 如果它确实有 move 构造函数, 那么就会调用 move 构造函数, 这能够免除大幅的内存配置.</p>

<p>基于安全的理由, 具名的参数将永远不被认定为右值, 即使它是被如此声明的; 为了获得右值必须使用 <code>std::move&lt;T&gt;()</code>.</p>

<p>```cpp
bool is_r_value(int &amp;&amp;) { return true; }
bool is_r_value(const int &amp;) { return false; }</p>

<p>void test(int &amp;&amp; i)
{</p>

<pre><code>is_r_value(i); // i 为具名变量，即使被声明成右值也不會被认为是右值。
is_r_value(std::move&lt;int&amp;&gt;(i)); // 使用 std::move&lt;T&gt;() 取得右值。
</code></pre>

<p>}
```</p>

<p>由于右值引用的用语特性以及对于左值引用 (L-value references;regular references) 的某些用语修正, 右值引用允许开发者提供完美转发 (perfect function forwarding). 当与变长参数模板结合, 这项能力允许函数模板能够完美地转送引数给其他接受这些特定引数的函数. 最大的用处在于转发构造函数参数, 创造出能够自动为这些特定引数调用正确建构式的工厂函数 (factory function).</p>

<h2>参考</h2>

<ul>
<li><a href="http://blog.csdn.net/pongba/article/details/1684519">《C++0x漫谈》系列之：右值引用(或“move语意与完美转发”)(上)</a></li>
<li><a href="https://zh.wikipedia.org/zh-cn/C%2B%2B11#.E5.8F.B3.E5.80.BC.E5.BC.95.E7.94.A8.E5.92.8C_move_.E8.AA.9E.E6.84.8F">维基百科C++11: 右值引用和 move 语义</a></li>
<li><a href="http://stackoverflow.com/questions/3106110/what-are-move-semantics/3109981">Stackoverflow：What are move semantics？</a></li>
<li><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2027.html#Move_Semantics">标准文档提案：Move Semantics</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++11 多线程, std::future & std::promise]]></title>
    <link href="http://bitdewy.github.com/blog/2013/06/14/cpp11-multithread-promise-future/"/>
    <updated>2013-06-14T22:36:00+08:00</updated>
    <id>http://bitdewy.github.com/blog/2013/06/14/cpp11-multithread-promise-future</id>
    <content type="html"><![CDATA[<p>C++11 中最让人高兴的新特性中线程库的支持一定榜上有名. C++11 中提供了 future 和 promise 来简化任务线程间的返回值操作; 同时为启动任务线程提供了 <a href="http://en.cppreference.com/w/cpp/thread/packaged_task">packaged_task</a> 以方便操作.</p>

<h2>std::packaged_task</h2>

<p>模板类 <a href="http://en.cppreference.com/w/cpp/thread/packaged_task">std::packaged_task</a> 可以包装任何可调用的对象(函数, lambda 表达式, std::bind, 或其他函数对象), 以便异步调用, 调用结果保存在 <a href="http://en.cppreference.com/w/cpp/thread/future">std::future</a> 中, 可以通过成员函数 get_future 访问. 需要注意的是, <a href="http://en.cppreference.com/w/cpp/thread/packaged_task">std::packaged_task</a> 是不可拷贝的(move only).</p>

<p>示例代码</p>

<p>```cpp</p>

<h1>include <iostream></h1>

<h1>include <cmath></h1>

<h1>include <thread></h1>

<h1>include <future></h1>

<h1>include <functional></h1>

<p>void task_lambda()
{</p>

<pre><code>std::packaged_task&lt;int(int,int)&gt; task([](int a, int b) {
    return std::pow(a, b); 
});
std::future&lt;int&gt; result = task.get_future();
task(2, 9);
std::cout &lt;&lt; "task_lambda:\t" &lt;&lt; result.get() &lt;&lt; '\n';
</code></pre>

<p>}</p>

<p>void task_bind()
{</p>

<pre><code>std::packaged_task&lt;int()&gt; task(std::bind(std::pow, 2, 11));
std::future&lt;int&gt; result = task.get_future();
task();
std::cout &lt;&lt; "task_bind:\t" &lt;&lt; result.get() &lt;&lt; '\n';
</code></pre>

<p>}</p>

<p>void task_thread()
{</p>

<pre><code>std::packaged_task&lt;int(int,int)&gt; task(std::pow);
std::future&lt;int&gt; result = task.get_future();
std::thread task_td(std::move(task), 2, 10);
task_td.join();
std::cout &lt;&lt; "task_thread:\t" &lt;&lt; result.get() &lt;&lt; '\n';
</code></pre>

<p>}</p>

<p>int main()
{</p>

<pre><code>task_lambda();
task_bind();
task_thread();
</code></pre>

<p>}
```</p>

<!-- more -->


<p>仅仅有 packaged_task 还远远不够, 我们还需要更强大的 <a href="http://en.cppreference.com/w/cpp/thread/future">future</a> 和 <a href="http://en.cppreference.com/w/cpp/thread/promise">promise</a>.</p>

<p>基本思路很简单: 当一个任务需要向父线程(启动它的线程)返回值时, 它把这个值放到 <a href="http://en.cppreference.com/w/cpp/thread/promise">promise</a> 中. 之后, 这个返回值会出现在和此 <a href="http://en.cppreference.com/w/cpp/thread/promise">promise</a> 关联的 <a href="http://en.cppreference.com/w/cpp/thread/future">future</a> 中.于是父线程就能读到返回值. 更简单点的方法, 参看 <a href="http://en.cppreference.com/w/cpp/thread/async">async()</a>.</p>

<p>如果我们有一个 <a href="http://en.cppreference.com/w/cpp/thread/future">future</a> f, 通过 get() 可以获得它的值:</p>

<p><code>cpp
X v = f.get();  // if necessary wait for the value to get computed
</code></p>

<p>如果它的返回值还没有到达, 调用线程会进行阻塞等待. 要是等啊等啊, 等到花儿也谢了的话, get() 会抛出异常的(从标准库或等待的线程那个线程中抛出).</p>

<p>如果我们不需要等待返回值(非阻塞方式), 可以简单询问一下 <a href="http://en.cppreference.com/w/cpp/thread/future">future</a>, 看返回值是否已经到达:</p>

<p>```cpp
if (f.wait_for(0))  {</p>

<pre><code>// there is a value to get()
// do something
</code></pre>

<p>} else {</p>

<pre><code>// do something else
</code></pre>

<p>}
```</p>

<p>但是 <a href="http://en.cppreference.com/w/cpp/thread/future">future</a> 最主要的用途是一个简单的获取返回值的方法: get().</p>

<p><a href="http://en.cppreference.com/w/cpp/thread/promise">promise</a> 的主要用途是提供一个 &ldquo;put"（或"get"，随你）操作, 以和 <a href="http://en.cppreference.com/w/cpp/thread/future">future</a> 的 get() 对应.</p>

<p><a href="http://en.cppreference.com/w/cpp/thread/promise">promise</a> 为 <a href="http://en.cppreference.com/w/cpp/thread/future">future</a> 传递的结果类型有 2 种: 传一个普通值或者抛出一个异常</p>

<p>```cpp
try {</p>

<pre><code>X res; 
// compute a value for res
p.set_value(res);
</code></pre>

<p>} catch (&hellip;) {   // oops: couldn&rsquo;t compute res</p>

<pre><code>p.set_exception(std::current_exception()); 
</code></pre>

<p>}
```</p>

<p>到目前为止还不错, 不过我们如何匹配 <a href="http://en.cppreference.com/w/cpp/thread/future">future</a> / <a href="http://en.cppreference.com/w/cpp/thread/promise">promise</a> 对呢? 一个在我的线程, 另一个在别的啥线程中吗? 是这样: 既然 <a href="http://en.cppreference.com/w/cpp/thread/future">future</a> 和 <a href="http://en.cppreference.com/w/cpp/thread/promise">promise</a> 可以被到处移动(不是拷贝), 那么可能性就挺多的. 最普遍的情况是父子线程配对形式, 父线程用 <a href="http://en.cppreference.com/w/cpp/thread/future">future</a> 获取子线程 <a href="http://en.cppreference.com/w/cpp/thread/promise">promise</a> 返回的值. 在这种情况下, 使用 <a href="http://en.cppreference.com/w/cpp/thread/async">async()</a> 是很优雅的方法.</p>

<h2>std::promise</h2>

<p>模板类 <a href="http://en.cppreference.com/w/cpp/thread/promise">std::promise</a> 提供一个存储设施, 当一个异步任务通过 <a href="http://en.cppreference.com/w/cpp/thread/future">std::future</a> 来获取结果时, <a href="http://en.cppreference.com/w/cpp/thread/promise">std::promise</a> 可以提供.</p>

<h2>std::future</h2>

<p>模板类 <a href="http://en.cppreference.com/w/cpp/thread/future">std::future</a> 提供了一种机制来访问异步操作的结果:
由 <a href="http://en.cppreference.com/w/cpp/thread/async">std::async</a>, <a href="http://en.cppreference.com/w/cpp/thread/packaged_task">std::packaged_task</a>, 或者 <a href="http://en.cppreference.com/w/cpp/thread/promise">std::promise</a> 创建的异步操作, 可以提供一个 <a href="http://en.cppreference.com/w/cpp/thread/future">std::future</a> 对象, 给创建者, 用来访问异步操作的结果.</p>

<p>异步操作的创建者, 可以使用各种不同的操作来查询, 等待, 或者从 <a href="http://en.cppreference.com/w/cpp/thread/future">std::future</a> 中取到异步操作的结果. 如果异步操作还没有执行完的话, 这些操作有可能会阻塞.
当一个异步操作完成时可以通过更改(例如使用 <code>std::promise::set_value</code>) 共享状态(该状态保存在 <a href="http://en.cppreference.com/w/cpp/thread/future">std::future</a> 中) 将结果返回给异步操作的创建者.</p>

<p>示例代码</p>

<p>```cpp</p>

<h1>include <iostream></h1>

<h1>include <future></h1>

<h1>include <thread></h1>

<p>int main()
{</p>

<pre><code>// future from a packaged_task
std::packaged_task&lt;int()&gt; task([](){ return 7; }); // wrap the function
std::future&lt;int&gt; f1 = task.get_future();  // get a future
std::thread(std::move(task)).detach(); // launch on a thread
// future from an async()
std::future&lt;int&gt; f2 = std::async(std::launch::async, [](){ return 8; });
// future from a promise
std::promise&lt;int&gt; p;
std::future&lt;int&gt; f3 = p.get_future();
std::thread([](std::promise&lt;int&gt;&amp; p){ p.set_value(9); },
             std::ref(p)).detach();
std::cout &lt;&lt; "Waiting..." &lt;&lt; std::flush;
f1.wait();
</code></pre>

<p>   f2.wait();</p>

<pre><code>f3.wait();
std::cout &lt;&lt; "Done!\nResults are: "
          &lt;&lt; f1.get() &lt;&lt; ' ' &lt;&lt; f2.get() &lt;&lt; ' ' &lt;&lt; f3.get() &lt;&lt; '\n';
</code></pre>

<p>}
```</p>

<h2>参考</h2>

<ul>
<li><a href="http://en.cppreference.com/w/cpp/thread">Cppreference：Thread support library</a></li>
<li><a href="http://en.wikipedia.org/wiki/Futures_and_promises">wikipedia: futures and promises</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++11 关键字 using]]></title>
    <link href="http://bitdewy.github.com/blog/2013/05/21/cpp11-keywords-using/"/>
    <updated>2013-05-21T00:45:00+08:00</updated>
    <id>http://bitdewy.github.com/blog/2013/05/21/cpp11-keywords-using</id>
    <content type="html"><![CDATA[<p><em>这个特性, 10年前就已经有提案了, 直到 C++11 中才正式加入标准. ⊙﹏⊙b汗</em></p>

<h2>使用小技巧来声明函数指针</h2>

<p>在 c++03 中, 函数指针要这么写:</p>

<p><code>cpp
typedef void (*FunctionPtr)();
</code></p>

<p>这个声明读起来相当的费劲, C 语言的初学者会很难理解上面的 typedef 表达的意思.</p>

<p>在 C++11 中, 我们可以使用更易读懂的方式来表达, 利用 using 关键字:</p>

<p><code>cpp
using FunctionPtr = void (*)();
</code></p>

<p>如果你想去除丑陋的 * 号, 还可以利用类型特化这么来写:</p>

<p>```cpp</p>

<h1>include &lt;type_traits></h1>

<p>using FunctionPtr = std::add_pointer&lt;void()>::type;
```</p>

<p>新关键字 using 当然不仅仅是为了这个简单的功能了, 最主要的目的是为了模板别名.</p>

<!-- more -->


<h2>模板别名</h2>

<p>在进入这个主题之前, 应该先弄清楚“模板类”和“类模板”本质上的不同. class template (类模板，是模板)是用来产生 template class (模板类, 是类型)的.
在标准 C++, typedef 可定义模板类一个新的类型名称, 但是不能够使用 typedef 来定义模板的别名. 举例来说:</p>

<p><code>cpp
template&lt; typename first, typename second, int third&gt;
class SomeType;
template&lt; typename second&gt;
typedef SomeType&lt;OtherType, second, 5&gt; TypedefName; // 在C++03是不合法的
</code></p>

<p>这不能够通过编译.
为了定义模板的别名, C++11 增加了以下的语法:</p>

<p><code>cpp
template&lt; typename first, typename second, int third&gt;
class SomeType;
template&lt; typename second&gt;
using TypedefName = SomeType&lt;OtherType, second, 5&gt;;
</code></p>

<p>using 紧跟着的标识, 用来表示后面的模板类型. 标准制定时尝试过使用旧的关键字 typedef 来实现该功能, 但是无法得到一个完整连贯的解决方案, 因此引入了新的关键字. (严格说来 using 并不是一个新的关键字, 在使用 namespace 时, 我们就已经见过它了, 但在 C++11 中它又有了新的语义.）</p>

<p>除了模板别名之外, using 关键字还可以用在一般的类型中, 就想文章一开始的地方一样:</p>

<p><code>cpp
typedef void (*PFD)(double);            // 传统语法
using PFD = void (*)(double);           // 新增与否
</code></p>

<h2>参考</h2>

<ul>
<li>C++ standard  14.6.7 Template aliases;  7.1.3 The typedef specifier</li>
<li><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1489.pdf">Templates aliases for C++</a></li>
<li><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2258.pdf">Templates Aliases (Revision 3)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++11 std::unordered_map]]></title>
    <link href="http://bitdewy.github.com/blog/2012/08/21/unordered-map/"/>
    <updated>2012-08-21T17:54:00+08:00</updated>
    <id>http://bitdewy.github.com/blog/2012/08/21/unordered-map</id>
    <content type="html"><![CDATA[<h2>历史</h2>

<p>在 C++ 中，第一个被广泛使用的哈希表实现是 SGI STL 中的，hash_map, hash_set, hash_multimap, hash_mutiset。
由于哈希表是非常常用的数据结构，逐渐的各厂家实现的标准库中都引入了该数据结构。</p>

<p>例如，GCC 的 lisbstdc++ , 以及微软的 MSVC 标准库。在这些公用的名字后面，有不同的实现，呃，不同的实现。它们在接口、能力、内在数据结构和支持操作的相关效率方面不同。写出使用哈希表的可移植代码是可能的，但不可能像使用标准库中的容器一样容易。（知道标准的重要性了吧。）好在 <code>hash_*</code> 这一组类加入了 C++ TR1 , 可惜由于名字被非标准的各家实现占用，只能退而求其次，改名为 <code>unordered_*</code>。</p>

<p>C++11 中，不排序的关联容器已经正式进入标准库。现在再选择的话，可以毫不犹豫的放弃非标准的 <code>hash_*</code> 而选择标准库中的 <code>unordered_*</code> 系类了。boost &lt;<a href="http://www.boost.org/doc/libs/1_53_0/boost/unordered_map.hpp">boost/unordered_map.hpp</a>> 中同样有实现。</p>

<!-- more -->


<h2>选择合适的数据结构</h2>

<p>对于一个程序员来说，分析具体的问题，选择适合的数据结构，有时候比算法更重要。好的数据结构可以帮助程序员解决大部分效率问题。Soctt Meyers 在《Effective STL》的第一条就提到：“仔细选择你的容器”。</p>

<p><code>std::unordered_map</code> 与 <code>std::map</code> 的区别是, <code>std::map</code> 是按照 <code>operator&lt;</code> 比较判断元素是否相同，以及比较元素的大小，然后选择合适的位置插入到树中。所以，如果对 map 进行遍历（中序遍历）的话，输出的结果是有序的。顺序就是按照 <code>operator&lt;</code> 定义的大小排序。</p>

<p>而 <code>std::unordered_map</code> 是计算元素的 hash 值，根据 hash 值判断元素是否相同。所以，对 <code>unordered_map</code> 进行遍历，结果是无序的。</p>

<p>用法的区别是，<code>std::map</code> 的 key 需要定义 <code>operator&lt;</code> 。 而 <code>std::unordered_map</code> 需要定义 <code>hash_value</code> 函数并且重载 <code>operator==</code>。
对于内置类型，如 <code>std::string</code>, 这些都不用操心。对于自定义的类型做 key, 就需要自己重载 <code>operator&lt;</code> 或者 <code>hash_value()</code> 了。</p>

<p>选择时,请基于时间和空间的综合考虑, <em>当不关心空间, 也不需要结果排好序时, 可以选择 <code>unordered_map</code> 获得更好的时间效率。</em></p>

<p><code>std::map</code> 对应与 java 中的 <code>TreeMap</code>, 而 <code>std::unordered_map</code> 对应于 java 中的 <code>HashMap</code>. 对于标准库中的散列表无法取名为 <code>hash_*</code>, 只能叫 <code>unordered_*</code>, 我只能说… 标准库进展太慢，结果好白菜都让猪给拱了……遗憾啊……</p>
]]></content>
  </entry>
  
</feed>
