<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: GotW | Bitdewy]]></title>
  <link href="http://bitdewy.github.com/blog/categories/gotw/atom.xml" rel="self"/>
  <link href="http://bitdewy.github.com/"/>
  <updated>2013-09-30T00:43:32+08:00</updated>
  <id>http://bitdewy.github.com/</id>
  <author>
    <name><![CDATA[bitdewy]]></name>
    <email><![CDATA[bitdewy@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[译] GotW #1 Solution: Variable Initialization – or Is It?]]></title>
    <link href="http://bitdewy.github.com/blog/2013/05/12/gotw1/"/>
    <updated>2013-05-12T02:55:00+08:00</updated>
    <id>http://bitdewy.github.com/blog/2013/05/12/gotw1</id>
    <content type="html"><![CDATA[<p>原文在这里 <a href="http://herbsutter.com/2013/05/09/gotw-1-solution/">GotW #1 Solution: Variable Initialization – or Is It?</a></p>

<p><em>第一个问题是用来强调理解你写的代码的含义的重要性. 下面是几行简单的代码 &ndash; 大部分都与其他的有一些区别, 即使只是语法略有变化.</em></p>

<h2>JG 问题</h2>

<p>1. 下面的代码有什么不同?</p>

<p>```cpp
widget w;                   // (a)</p>

<p>widget w();                 // (b)
widget w{};                 // &copy;</p>

<p>widget w(x);                // (d)
widget w{x};                // (e)</p>

<p>widget w = x;               // (f)
widget w = {x};             // (g)</p>

<p>auto w = x;                 // (h)
auto w = widget{x};         // (i)
```</p>

<h2>Guru 问题</h2>

<p>2. 下面的每一行代码做了什么?</p>

<p>```cpp
vector<int> v1( 10, 20 );   // (a)</p>

<p>vector<int> v2{ 10, 20 };   // (b)
```</p>

<p>3. 除了上面的情况以外, 使用 <code>{ }</code> 初始化对象还有什么其他的好处?</p>

<p>4. 什么时候使用 <code>( )</code> 以及 <code>{ }</code> 来初始化对象? 为什么?</p>

<!-- more -->


<h2>解决方案</h2>

<p>这几个问题展示了几件事:</p>

<ul>
<li>默认初始化, 显式初始化, 拷贝初始化, 以及初始化列表之间的区别.</li>
<li>初始化时 <code>( )</code> 与 <code>{ }</code> 之间的差异.</li>
<li>在现代 C++ 中要避免的, 看起来像初始化, 但完全和初始化无关的东西</li>
</ul>


<p>不过, 最重要的是: 如果你坚持问题 #4 中的两个简单的指导的话, 就可以忽略这些情况, 规则相当的简单, 而且默认情况下可以获得高效的性能.</p>

<h3>1. 下面的代码有什么不同?</h3>

<p>让我们一条一条的来看.</p>

<p><strong>情况 (a) 是默认初始化</strong></p>

<p><code>cpp
widget w;                   // (a)
</code></p>

<p>这一行代码声明了一个 <code>widget</code> 类型的变量 <code>w</code>, 假定 <code>widget</code> 是一个 <code>class</code> 类型, 它会使用默认构造函数 <code>widget::widget()</code> 来初始化.</p>

<p><strong>情况 (b) 是一个 &ldquo;恼人&rdquo; 的无关转移, 是历史遗留问题</strong></p>

<p><code>cpp
widget w();                 // (b)
</code></p>

<p>这是 C++ 的一个陷阱: 第一眼看上去, 它看上去像另一个调用默认构造函数 <code>widget::widget()</code> 的变量声明. 事实上, 感谢语法二义性, 这是一个函数声明. 一个名为 <code>w</code>, 无参, 返回值是 <code>widget</code> 类型的函数声明. (如果你无法一眼看出的话, 考虑下上面的代码其实与 <code>int f()</code> 没有任何的差别, 而这个函数声明是显而易见的对吧.)</p>

<p>避免你认为 &ldquo;吖, 但是那些 <code>()</code> 是多于的, 这是程序员自己的错误, 因为他们没有直接写 <code>widget w;</code>&rdquo;, 注意, 这个的问题也会出现在你以为你正在使用临时对象初始化变量的时候:</p>

<p><code>cpp
// same problem (gadget and doodad are types)
//
widget w( gadget(), doodad() );  // pitfall: not a variable declaration
</code></p>

<p>Scott Meyers 很多年前就称这个是 &ldquo;C++ 中最恼人的语法解析&rdquo;, 因为标准中解决语法二义性是这么说的: &ldquo;如果能够被解析为函数声明, 那么它就是一个函数声明.&rdquo;</p>

<p>好消息是, 这个问题将要成为历史, 在新的代码中你将不会遇到它, 因为 C++11 移除了这个陷阱. 注意 C++11 并没有修改语义 &ndash; C++11 的向后兼容 C++98 做的非常好, 包括这个语法二义性, 仍然是它原有的含义. 但是, C++11 通过提供新的语法取代情况 (b), 因此我们再也不会掉到这个陷阱中了.</p>

<p><strong>情况 (c) 干净明确</strong></p>

<p><code>cpp
widget w{};                 // (c)
</code></p>

<p>在这儿我们有了第一个使用 <code>{ }</code> 而不使用 <code>()</code> 的理由: 对于任意的 class 类型 <code>widget</code>, 情况 (c) 做的事情像 (a) 一样的明确 &ndash; 无二义性, 干净, 明确.</p>

<p>&ldquo;哈哈, 但是等等, 它可没有那么简单!&rdquo; 有些人可能会反对. &ldquo;如果 <code>widget</code> 有一个接受 <code>std::initializer_list</code> 的构造函数那会怎么样呢? 他们都是被优先选择的, 所以, 如果 <code>widget</code> 有这么一个构造函数, 这个写法不会调用它吗?&rdquo;</p>

<p>答案是不会, 这个真的像你看到的一样简单, 因为标准中明确了, 如果可以的话, 空的 <code>{ }</code> 列表意味着调用默认构造函数. 不过, 能意识到 <code>initializer_list</code> 是好的, 让我们在后面再讨论它.</p>

<p><strong>情况 (d) 和 情况 (e) 是直接初始化</strong></p>

<p><code>cpp
widget w(x);                // (d)
widget w{x};                // (e)
</code></p>

<p>假设 <code>x</code> 不是一个类型名, 这两个都是直接初始化. 因为变量 <code>w</code> 是由 <code>x</code> 直接调用 <code>widget::widget(x)</code> 初始化的. 如果 <code>x</code> 也是 <code>widget</code> 类型, 它会调用拷贝构造函数. 否则的话, 调用一个转换构造函数.</p>

<p>但是, 注意 <code>{x}</code>, 它会创建一个 <code>initializer_list</code>. 如果 <code>widget</code> 有接受 <code>initializer_list</code> 的构造函数的话, 这个构造函数是被优先选择的; 否则, 如果 <code>widget</code> 有接受任意 <code>x</code> 的类型的构造函数的话(包括类型转换), 这个构造函数将会被调用.</p>

<p>情况 (e) 有两个优于 (d) 的地方: 一, 与 (c) 一样, (e) 是明确, 无二义性的. 如果 <code>x</code> 是一个类型名, 那么 (d) 就是一个函数声明, 即使在作用域内有一个名为 <code>x</code> 的变量 (看下文), 而 (e) 不可能是一个函数声明.</p>

<p>第二: (e) 更安全, 因为它不允许有损转换, 一些内建类型是允许的. 考虑下面的代码:</p>

<p><code>cpp
int i1( 12.345 );           // ok: loss .345, we didn't like it anyway
int i2{ 12.345 };           // error: would be lossy implicit narrowing
</code></p>

<p><strong>情况 (f) 与 (g) 是拷贝初始化和拷贝类表初始化</strong></p>

<p>这是最后两个 non-auto 的情况:</p>

<p><code>cpp
widget w = x;               // (f)
</code></p>

<p>这就是所谓的拷贝初始化. <em>从概念上来讲</em>, 变量 <code>w</code> 是由 <code>widget</code> 的转移构造函数或者拷贝构造函数初始化的. 有可能是在调用一个隐式转换函数之后(显式转换不会调用).</p>

<blockquote><p><strong>通常的错误:</strong> 这个绝对是初始化; 绝不是赋值, 所以绝对不会调用 <code>T::operator=()</code>. 是的, 我知道这有一个<code>=</code>赋值符号, 但是不要让这个符号影响到你 &ndash; 这仅仅是从 C 继承而来的符号, 不是赋值操作符.</p></blockquote>

<p>下面是语义:</p>

<ul>
<li>如果 <code>x</code> 的类型是 <code>widget</code>, (f) 与 (d) <code>widget w(x);</code> 的含义完全一致, 除非明确的构造函数不能使用. 他保证了只有一个构造函数被调用.</li>
<li>如果 <code>x</code> 是其他类型, <em>从概念上来讲</em>编译器首先将 <code>x</code> 隐式转换为 <code>widget</code> 类型的临时对象, 然后对临时右值使用转移构造函数, 如果没有好的转移构造函数, 那么会使用拷贝构造函数 &ndash; &ldquo;低效的转移"作为备选. 假设存在可用的隐式转换, (f) 就与 <code>widget w(widget(x))</code> 一致了.</li>
</ul>


<p>注意, 上面说了几次<em>从概念上来讲</em>. 这是因为通常编译器都会做优化, 优化掉临时变量, 如果存在隐式转换, 从 (f) 转换为 (d), 那么就优化掉了额外的转移操作. 但是, 尽管编译器这么做了, <code>widget</code> 的拷贝构造函数也必须是可访问的, 即使没有调用 &ndash; 拷贝构造函数的副作用可能发生也可能不发生, 就这些.</p>

<p>现在来注意一下增加的符号 <code>=</code>:</p>

<p><code>cpp
widget w = {x};             // (g)
</code></p>

<p>这个是所谓的拷贝列表初始化. 它与 <code>widget w{x};</code> 的含义一致 除非显示的构造函数无法使用. 它保证了只有咦个的构造函数被调用.</p>

<p><strong>情况 (h) 和 (i) 也是拷贝初始化, 但是更简单</strong></p>

<p><code>cpp
auto w = x;                 // (h)
auto w = widget{x};         // (i)
</code></p>

<p>语义与 (f) 和 (g) 一样, 但是学习起来更简单, 因为使用了 <code>auto</code> 保证了右侧表达式类型推导的准确性. 需要注意的是 (i) 在隐式转换与显式转换的情况下都能正常工作.</p>

<p>(h) 与 (d) 的含义一致, <code>type_of_x w(x);</code>. 只有一个拷贝构造函数被调用. 它可以保证类型发生变化时, 程序还总是正确的: 因为 (h) 没有明确特性的类型, 它有两个有效的保证, 因为这不会存在类型的转换, 以及更好的维护性, 因为当程序中 <code>x</code> 的类型变更时, &lsquo;w&rsquo; 会自动变更类型与 <code>x</code> 保持一致.</p>

<p>当你想要明确类型或者需要显式的类型转换时, (i) 是最风格一致的, 而且一旦使用了 <code>{ }</code> 就可以避免有损的类型转换了. 大部分的编译器实现, 只会有一个构造函数调用 &ndash; 和我们看到的 (f) 与 (g) 相似, 概念上来讲会有两个构造函数调用, 一个转换构造函数或者拷贝构造函数用来创建临时的 <code>widget{x}</code> 然后紧接着一个转移构造函数来构造 <code>w</code>, 但是编译器会把后一个优化掉.</p>

<p>通常情况下, 我推荐你尝试这两种用法, 并倾向于使用它来伴随你舒服的成长. 现在几乎所有我写的局部变量声明都采用这种方式. (我知道会有一些人怀疑这种方式 &ndash; 更多的关于关键字 <code>auto</code> 的问题在其他的 GotW 中讨论.)</p>

<h3>2. 下面的每一行代码做了什么?</h3>

<p>在第二个问题的代码中, 我们创建了一个 <code>vector&lt;int&gt;</code> 并将参数 <code>10</code> 和 <code>20</code> 传给它的构造函数 &ndash; 第一种情况是 <code>(10, 20)</code>, 第二种情况是 <code>{10, 20}</code>.</p>

<p>两个都会调用构造函数, 但是会调用哪个呢? 嗯, <code>vector&lt;int&gt;</code> 有很多接受两个参数的构造函数, 但是只有下面两个能够正确的接受参数 <code>10</code> 和 <code>20</code>. 为了简单, 忽略掉默认的分配器参数, 两个构造函数应该是下面的样子:</p>

<p>```cpp
vector( size_t n, const int&amp; value );    // A: n copies of value</p>

<p>vector( initializer_list<int> values );  // B: copy of values
```</p>

<p>有两个简单的规则可以帮助我们确定哪个函数将被调用:</p>

<ul>
<li>在表达式的上下文中使用 <code>{ }</code> 你会得到一个 <code>initializer_list</code>.</li>
<li>接受 <code>initializer_list</code> 参数的构造函数会优于其他构造函数被选择, 同时会隐藏其他构造函数, 否则可能是可行的.</li>
</ul>


<p>有了这两条, 答案就很简单了:</p>

<p>```cpp
vector<int> v1( 10, 20 );    // (a) calls A: 10 copies of the value 20
assert( v1.size() == 10 );</p>

<p>vector<int> v2{ 10, 20 };    // (b) calls B: the values 10 and 20
assert( v2.size() == 2 );
```</p>

<h3>3. 除了上面的情况以外, 使用 <code>{ }</code> 初始化对象还有什么其他的好处?</h3>

<p>首先, 这叫做统一初始化, 因为它统一 &ndash; 所有的类型, 包括 <code>structs</code>, 数组, 标准库容器, 而且也不存在恼人的语法解析问题.</p>

<p>```cpp
struct mystruct { int x, y; };</p>

<p>// C++98
rectangle       w( origin(), extents() );       // oops, vexing parse
complex<double> c( 2.71828, 3.14159 );
mystruct        m = { 1, 2 };
int             a[] = { 1, 2, 3, 4 };
vector<int>     v;                              // urk, need more code
for( int i = 1; i &lt;= 4; ++i ) v.push_back(i);   //   to initialize this</p>

<p>// C++11 (note: &ldquo;=&rdquo; is optional)
rectangle       w   = { origin(), extents() };
complex<double> c   = { 2.71828, 3.14159 };
mystruct        m   = { 1, 2 };
int             a[] = { 1, 2, 3, 4 };
vector<int>     v   = { 1, 2, 3, 4 };
```</p>

<p>注意, 这不仅仅是个审美的问题. 考虑编写通用的能够初始化任何类型的代码&hellip; 我们正在做的, 让我们使用完美转发做为例子:</p>

<p>```cpp
template<typename T, typename ...Args>
void forwarder( Args&amp;&amp;&hellip; args ) {</p>

<pre><code>// ...
T local = { std::forward&lt;Args&gt;(args)... };
// ...
</code></pre>

<p>}</p>

<p>forwarder<int>            ( 42 );                  // ok
forwarder<rectangle>      ( origin(), extents() ); // ok
forwarder&lt;complex<double>>( 2.71828, 3.14159 );    // ok
forwarder<mystruct>       ( 1, 2 );                // ok because of {}
forwarder&lt;int[]>          ( 1, 2, 3, 4 );          // ok because of {}
forwarder&lt;vector<int>>    ( 1, 2, 3, 4 );          // ok because of {}
```</p>

<p>如果 <code>forwarder</code> 内部使用了 <code>( )</code> 做初始化符号的话, 那么最后三条是不合法的.</p>

<p>新的符号 <code>{ }</code> 在任何地方都能完美的工作, 包括类成员的初始化:</p>

<p><code>cpp
widget::widget( /*...*/ ) : mem1{init1}, mem2{init2, init3} { /*...*/ }
</code></p>

<p>另外, 它还能简单清晰的表达传递函数参数, 返回值, 而不需要一个具名的临时对象:</p>

<p>```cpp
void draw_rect( rectangle );</p>

<p>draw_rect( rectangle(origin, selection) );         // C++98
draw_rect({ origin, selection });                  // C++11</p>

<p>rectangle compute_rect() {
   // &hellip;
   if(cpp98) return rectangle(origin, selection);  // C++98
   else      return {origin, selection};           // C++11
}
```</p>

<h3>4. 什么时候使用 <code>( )</code> 以及 <code>{ }</code> 来初始化对象? 为什么?</h3>

<p>下面是简单的指导:</p>

<blockquote><p><strong>准则:</strong> 尽量在初始化时使用 <code>{ }</code>, 比如 <code>vector&lt;int&gt; v = { 1, 2, 3, 4 };</code> 或者 <code>auto v = vector&lt;int&gt;{ 1, 2, 3, 4 };</code>, 因为它有更好的一致性, 更正确, 可以避免去了解过去的陷阱. 在单参数的情况下你可能会仅仅看到一个赋值符号 <code>=</code>, 就像 <code>int i = 42;</code> 一样, 这种情况下, 省略括号是好的&hellip;</p></blockquote>

<p>上面的准则可以覆盖绝大部分情况, 但是也有一个例外:</p>

<blockquote><p>&hellip; 在极端情况下, 比如 <code>vector&lt;int&gt; v(10,20);</code> 或者 <code>auto v = vector&lt;int&gt;(10,20);</code> 时, 使用 <code>( )</code> 明确的调用会被 <code>initializer_list</code> 构造函数隐藏的构造函数.</p></blockquote>

<p>但是, 这个仅仅是在极端情况下, 因为默认构造函数以及拷贝构造函数已经很特别, 并且能与括号 <code>{ }</code> 很好的工作, 现在一个好的类的设计会避免用到 <code>()</code> 来提供用户定义的构造函数, 因为下面的设计准则:</p>

<blockquote><p><strong>准则</strong>: 当你设计一个类时, 避免提供一个与 <code>initializer_list</code> 构造函数会产生二义性的构造函数, 这样用户就不需要使用 <code>()</code> 来访问会被隐藏掉的构造函数.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[译] GotW #104: Smart Pointers, Part 2 (Difficulty: 5/10)]]></title>
    <link href="http://bitdewy.github.com/blog/2012/07/15/gotw104/"/>
    <updated>2012-07-15T16:28:00+08:00</updated>
    <id>http://bitdewy.github.com/blog/2012/07/15/gotw104</id>
    <content type="html"><![CDATA[<p>原文在这里 <a href="http://herbsutter.com/gotw/_104/">GotW #104: Smart Pointers, Part 2 (Difficulty: 5/10)</a></p>

<p>当你正在研究最近新加入的项目的代码时，你发下了下面的工厂方法的声明：</p>

<p><code>widget* load_widget( widget::id desired );</code></p>

<h2>JG 问题</h2>

<p>1. 返回值的类型有什么问题？</p>

<h2>Guru 问题</h2>

<p>2. 返回值的推荐类型是是什么？ 解释你的答案，包括任何的权衡。</p>

<p>3. 你希望更改返回值的类型为问题 #2 中推荐的类型，但是你担心破坏了原有代码的函数调用的兼容性；重新编译现有的函数调用是可行的，但修改所有的函数调用就……。然后你灵光一闪，意识到这是一个相当新的项目，所有的代码都使用现代 C++ 惯用法，然后你继续修改返回值类型，而没有一点担心，知道重构仅仅需要一点点或者更不不需要更改调用函数的代码。是什么让你如此自信？</p>

<!-- more -->


<h2>解决方案</h2>

<p><strong>1. 返回值的类型有什么问题？</strong></p>

<p>第一，我们能够从两行的问题描述中知道些什么？</p>

<ul>
<li>我们说过，load_widget 是一个工厂方法。它通过“loading” 生产出一个对象，然后把它返回给调用者。由于返回值类型是指针类型，所以结果可能是 null。</li>
<li>调用者会适当的使用该对象，可能是调用它的成员函数，或者把它传给其他的函数，等等。这是不安全的，除非调用者确保该对象存活——调用者管理对象的生命周期；或者共享所有权，如果工厂方法负责维护内部的强引用和弱引用的话。</li>
<li>因为调用者持有或共享所有权，它必须在对象不再需要时做一些工作。如果是直接持有，掌管生命周期的话，它应该销毁该对象，通常是一个 delete 或者也可能是类似于 unload_widget 的一个函数调用。不然的话，如果是共享所有权，它应该减少共享的引用计数。</li>
</ul>


<p>不幸的是，返回一个 widget* 有两个主要的问题。第一，默认情况下它是不安全的，因为默认的操作模式（比如不保存返回值）会造成 widget 泄露：</p>

<p>``` cpp
// Example 1: Leak by default. Really, this is just so 20th-century&hellip;
//</p>

<p>widget* load_widget( widget::id desired );</p>

<p>:::</p>

<p>load_widget( some_id ); // oops
```</p>

<p>Example 1 的代码可以干净的编译，运行，（不）开心的泄露 widget。</p>

<p>第二，函数签名传达出来的信息太少了，“一个 widget ？是的，开始吧！享受它。”文档中会指出调用者应该持有该对象，掌管对象的生命周期（或者其它），但是函数声明没有给出这些信息——它掌管对象的生命周期，还是共享所有权，到底是哪个？阅读文档然后记下它吧，因为函数声明没办法告诉我们到底是哪种情况。</p>

<p><strong>2. 返回值的推荐类型是是什么？ 解释你的答案，包括任何的权衡。</strong></p>

<p>推荐的返回值类型是 unique_ptr 或者也可能是 shared_ptr。注意现在 C++ 中返回值类型是很平常的了，但是还有一点不太合适，它改变了语义，因为返回指针类型允许返回 null （无对象），而返回一个值得话不能轻易地处理这个语义，除非加个类似于 optional&lt;> 的东西。</p>

<p><em>准则：工厂方法应该默认返回 unique_ptr 类型，或当需要共享所有权时使用 shared_ptr 类型。</em></p>

<p>这同时解决了上面两个问题：安全，自描述。</p>

<p>第一，考虑如何立即解决 Example 1 中的安全问题：</p>

<p>``` cpp
// Example 2: Clean up by default. Much better&hellip;
//</p>

<p>unique_ptr<widget> load_widget( widget::id desired );</p>

<p>:::</p>

<p>load_widget( some_id ); // cleans up
```</p>

<p>Example 2 的代码可以干净的编译，运行，开心的清理 widget。但它不仅仅在这种情况下正确——构造也是正确的，因为现在没有办法去制造出一个导致泄露的错误。</p>

<p>画外音：可能会有人说，“难道不会有人一直写 load_widget(some_id).release()？”如果这些人发神经的话，当然可以；正确的答案是，“不要这么做。” 记住我们关心的是什么——bug 和错误，而不是精心设计的犯罪——显然病态的滥用属于后一类。这与在 C# 的 using 块中显式的调用 Dispose，或在 Java 的 try-with-resources 块中调用 close，没什么区别，不会比它们存在更多的类型安全问题。</p>

<p>如果清理工作不是一个单独的 delete 语句，那么该怎么做？简单：使用自定义的 deleter。锦上添花的是例子中的工厂方法知道使用哪个 deleter，并且能够在构造返回值的时候确定；调用者不需要关心这些，尤其是，当调用者使用 auto 关键字作为返回值类型的时候。</p>

<p>第二，这是自描述的：一个返回值类型是 unique_ptr 的函数，清楚的说明这是一个纯“source” 函数，如果一个函数的返回值是 shared_ptr，那么清楚的说明它返回的是一个共享的所有权和/或一个观察者。</p>

<p>最后，为什么默认情况下，如果你不需要表达共享所有权的语义时，优先考虑使用unique_ptr？因为不管对于性能还是正确性来说，这都是对的事情，并且也给调用者留下了一些余地：</p>

<ul>
<li>返回值类型为 unique_ptr 表示返回唯一所有权，这是纯“source” 工厂方法的标准形式。</li>
<li>unique_ptr 的性能不会被打败——转移一个 unique_ptr 和转移/复制一个原始指针一样的廉价。</li>
<li>如果调用者想要通过 shared_ptr 来管理对象的声明周期，可以通过隐式的转移操作来转换为 shared_ptr 类型——不需要显式的 std::move 因为编译器知道返回值是一个临时对象。</li>
<li>如果调用者想要用其他的办法来维护对象的生命周期，可以通过调用 .release() 来得到原始指针。这是有用的，但是 shared_ptr 没有。</li>
</ul>


<p>看下面的实现：</p>

<p><code>cpp
// Example 2, continued
//
auto up = load_widget(1);                              // unique_ptr (by default)
shared_ptr&lt;widget&gt; sp = load_widget(2);                // shared_ptr (if desired)
my::smart_ptr&lt;widget&gt; msp = load_widget(3).release();  // your own smart pointer (if desired)
widget* p = load_widget(4).release();                  // or even old-school manual management (not recommended)
delete p;
</code></p>

<p>当然，如果工厂方法持有一些共享所有权的对象，不论是通过内部的 shared_ptr 还是 weak_ptr，返回 shared_ptr。这时调用者只能被迫使用 shared_ptr，但在这种情形下，这样是合适的。</p>

<p><strong>3. 你希望更改返回值的类型为问题 #2 中推荐的类型，但是你担心破坏了原有代码的函数调用的兼容性；重新编译现有的函数调用是可行的，但修改所有的函数调用就……。然后你灵光一闪，意识到这是一个相当新的项目，所有的代码都使用现代 C++ 惯用法，然后你继续修改返回值类型，而没有一点担心，知道重构仅仅需要一点点或者更不不需要更改调用函数的代码。是什么让你如此自信？</strong></p>

<p>现代可移植的 C++ 代码使用 unique_ptr，shared_ptr，和 auto。返回 unique_ptr 类型可以和这三个协同工作，返回 shared_ptr 只能与后两个协同工作。</p>

<p>如果调用者接受返回值时使用了 auto，例如 <code>auto w = load_widget(whatever)</code>；那么类型自然会是正确的，正常的解引用也可以工作，只有在调用者试图把它存储到一个其他类型的非局部变量中时代码才会出问题。</p>

<p><em>准则：优先考虑使用 auto 声明变量，除非需要显式的类型转换。它更短，而且可以避免类型轻微更改时引起的不必要的波澜。</em></p>

<p>否则：如果调用者没有使用 auto ，那么它应该已经使用返回结果初始化了 unique_ptr 或 shared_ptr， 因为现代 C++ 代码不使用非参数的原始指针变量（下次详细讨论）。每种情况下，返回一个 unique_ptr 可以工作：一个 unique_ptr 可以无缝的转换成这些类型，如果语义上需要返回共享的所有权，那么调用者应该已经使用了 shared_ptr，这样的话，再次工作还会是正常的。（可能比之前的更好，因为为了让原本的返回原始指针的版本正常工作，返回类型大概会被 enable_shared_from_this 所胁迫，但如果我们显示的返回一个 shared_ptr 的话，这些就是不需要的了。）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[译] GotW #103: Smart Pointers, Part 1 (Difficulty: 3/10)]]></title>
    <link href="http://bitdewy.github.com/blog/2012/07/14/gotw103/"/>
    <updated>2012-07-14T19:14:00+08:00</updated>
    <id>http://bitdewy.github.com/blog/2012/07/14/gotw103</id>
    <content type="html"><![CDATA[<p>原文在这里 <a href="http://herbsutter.com/gotw/_102/">GotW #103: Smart Pointers, Part 1 (Difficulty: 3/10)</a></p>

<h2>JG 问题</h2>

<p>1. 什么情况下你会使用 shared_ptr 和 unique_ptr ？尽可能多的列出你能想到的情况。</p>

<h2>Guru 问题</h2>

<p>2. 为什么要使用 make_shared 来构造 shared_ptr 对象？请解释。</p>

<p>3. 如何处理 auto_ptr ？</p>

<!-- more -->


<h2>解决方案</h2>

<p><strong>1. 什么情况下你会使用 shared_ptr 和 unique_ptr ？尽可能多的列出你能想到的情况。</strong></p>

<p>当不确定时，优先考虑使用 unique_ptr，你可以在之后有需要的时候转换成 shared_ptr。如果你一开始就可以确定需要共享所有权，那么你可以直接使用 make_shared（看下面的 #2）来构造 shared_ptr 对象。</p>

<p>“当不确定时，优先考虑使用 unique_ptr” 的主要原因包括一下几点：</p>

<p><strong>语义</strong>：选择正确的智能指针，尽可能的直接表达你的意图，和（当前）你所需要的。如果你正在创建一个对象并且不需要共享所有权（当时看来），使用表达唯一所有权的 unique_ptr，你仍然可以把它放到容器中，（例如：<code>vector&lt;unique_ptr&lt;widget&gt; &gt;</code>），同时也可以做大部分原始指针能做的事情，而且更安全。如果之后你又需要共享所有全，那么你通常都可以直接把 unique_ptr 转换为 shared_ptr。</p>

<p><strong>效率</strong>：unique_ptr 比 shared_ptr 有更好的性能，因为它不需要维护一个引用计数和控制块；unique_ptr 的转移几乎和原始指针一样廉价。如果你没有比你需要的要求更多，那么就不会招致额外的开销。</p>

<p><strong>适应性</strong>：如果你一开始就使用 unique_ptr，你通常稍后可以把它转换成 shared_ptr，或者甚至一个原始指针。（通过 get 或者 release）。</p>

<p><strong>2. 为什么要使用 make_shared 来构造 shared_ptr 对象？请解释。</strong></p>

<p>shared_ptr 的实现需要维护被 shared_ptrs 和 weak_ptrs 引用的对象的内部信息控制块。特别的，内部信息包含的不是一个引用计数，而是两个：</p>

<ul>
<li>一个“强引用”计数，用来记录当前有多少个存活的 shared_ptrs 正持有该对象。共享的对象会在最后一个强引用离开的时候销毁（也可能是释放）。</li>
<li>一个“弱引用”计数，用来记录当前有多少个正在观察该对象的 weak_ptrs。当最后一个弱引用离开的时候，共享的内部信息控制块会被销毁和释放（共享的对象也会被释放，如果还没有释放的话）。</li>
</ul>


<p>如果你通过使用原始的 new 表达式分配对象，然后传递给 shared_ptr，shared_ptr 的实现没有办法选择，而只能单独的分配控制块，看下面的 Example 2(a) 和 Fugure 2(a)。</p>

<p><code>cpp
// Example 2(a): Separate allocation
auto p = new widget();
shared_ptr sp1{ p }, sp2{ sp1 };
</code></p>

<p><img src="http://y6bhba.bay.livefilestore.com/y1pDu8kORu85CKSKHFVBvapxrccVoMAjc8W0d6mScWwunuhqV8n25QZKgZhM6MPtFGV1c6dPgjil7g/sharedptr1.png" alt="" /></p>

<p>我们应该在此避免两次单独的分配，如果你使用 make_shared 来分配对象，那么shared_ptr 的构造就仅需要一步，他的实现可以把两次分配合并成一次分配，看下面的 Example 2(b) 和 Figure 2(b)。</p>

<p><code>cpp
// Example 2(b): Single allocation
auto sp1 = make_shared(), sp2{ sp1 };
</code></p>

<p><img src="http://y6yska.bay.livefilestore.com/y1p-Y0XAkcMZMrSdxkTa85nShcDkVKvqhMTFVGSDc0jURLybPXTGHPdWv9CZGgcGmvZwQQvd6Y1Qdg/sharedptr2.png" alt="" /></p>

<p>通常情况下，一个单独的函数调用可以表达的比你想要的东西更多，你给了系统一个更好的机会去以更好的效率完成这项工作。这是毫无疑问的，使用单独的函数调用 make_shared 代替 new widget() 和 shared_ptr(widget *)，就好像当你插入 100 个元素到 vector 中时，使用单独的一个指定插入区间的函数调用 v.insert(first, last) 来代替调用 100 次 v.insert(value) 一样。</p>

<p><strong>3. 如何处理 auto_ptr ？</strong></p>

<p>auto_ptr 是最……的特性，它在 C++ 还没有转移语义的时候，勇敢的尝试创建一个 unique_ptr。</p>

<p>现在 auto_ptr 是被反对的，并且不应该在新的代码中使用它。如果你有机会，应该试着在你的代码中全局替换，把 auto_ptr 都替换成 unique_ptr；大部分使用的地方会像之前一样工作，而且它可能暴露出问题（比如编译期错误）或者修复（悄悄地）一个或两个你自己都不知道的 bug。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[译] GotW #102: Exception-Safe Function Calls (Difficulty: 7/10)]]></title>
    <link href="http://bitdewy.github.com/blog/2012/07/07/gotw102/"/>
    <updated>2012-07-07T00:06:00+08:00</updated>
    <id>http://bitdewy.github.com/blog/2012/07/07/gotw102</id>
    <content type="html"><![CDATA[<p>[这是 <a href="http://www.gotw.ca/gotw/056.htm">GotW #56</a> 的 C++11 更新版]</p>

<p>原文在这里 <a href="http://herbsutter.com/gotw/_102/">GotW #102: Exception-Safe Function Calls (Difficulty: 7/10)</a></p>

<h2>JG问题</h2>

<p>1. 考虑下面的语句，函数 f，g，h 和表达式 expr1 还有 expr2，它们的执行顺序是什么？假设 expr1 和 expr2 不包含函数调用。</p>

<p>``` cpp
// Example 1(a)
//
f( expr1, expr2 );</p>

<p>// Example 1(b)
//
f( g( expr1 ), h( expr2 ) );
```</p>

<h2>Guru问题</h2>

<p>2. 当你翻看公司的陈年老代码的时候，你发现了如下的代码片段：</p>

<p>``` cpp
// Example 2</p>

<p>// In some header file:
void f( T1<em>, T2</em> );</p>

<p>// At some call site:
f( new T1, new T2 );
```</p>

<p>这段代码包含潜在的异常安全问题吗？请解释。</p>

<p>3. 当你继续查看的时候，你发现了有人不喜欢 Example 2 的代码，因为上面那个问题提到的文件的后续版本已经被改成了下面这个样子：</p>

<p>``` cpp
// Example 3</p>

<p>// In some header file:
void f( std::unique_ptr<T1>, std::unique_ptr<T2> );</p>

<p>// At some call site:
f( std::unique_ptr<T1>{ new T1 }, std::unique_ptr<T2>{ new T2 } );
```</p>

<p>这比之前的 Example 2 的版本有哪些改进，如果有的话？ 异常安全问题是否仍然存在？请解释。</p>

<p>4. 如何写出一个 make_unique 使它能够解决 Example 3 中的问题，并能以如下方式使用：</p>

<p>``` cpp
// Example 4</p>

<p>// In some header file:
void f( std::unique_ptr<T1>, std::unique_ptr<T2> );</p>

<p>// At some call site:
f( make_unique<T1>(), make_unique<T2>() );
```</p>

<!-- more -->


<h2>解决方案</h2>

<p><strong>1. 考虑下面的语句，函数 f，g，h 和表达式 expr1 还有 expr2，它们的执行顺序是什么？假设 expr1 和 expr2 不包含函数调用。</strong></p>

<p>答案遵循下面的基本规则：</p>

<ul>
<li>函数调用之前，所有的参数必须都已经求值。这也包括任何有副作用的作为函数参数的表达式。</li>
<li>当函数开始执行的时候，在调用该函数的代码中不会有任何表达式开始或继续求值，直到函数调用结束。函数调用永远都不会交叉执行。</li>
<li>用作函数参数的表达式可能以任意的顺序求值，包括交叉执行，除非另有其他规则限制。</li>
</ul>


<p>在标准 C++11 中，这些线程内的顺序约束由“sequenced before” 关系决定，它约束了编译器和硬件在单线程执行中的行为。取代了旧的 C/C++ “sequence point”（序列点） ，但它们的目的是相同的。</p>

<p>给出了这些规则，让给我看看在我们的例子中发生了什么：</p>

<p><code>cpp
// Example 1(a)
//
f( expr1, expr2 );
</code></p>

<p>在例子 1(b) 中，函数和表达式可能以任何的顺序来计算，考虑下面的规则：</p>

<ul>
<li>epxr1 必须在 g 调用之前计算。</li>
<li>expr2 必须在 h 调用之前计算。</li>
<li>g 和 h 必须在 f 调用之前完成。</li>
</ul>


<p>表达式 expr1 和 expr2 的求值有可能交错，但不可能与函数调用交错。举个例子，无论是表达式 expr2 的一部分，还是函数 h 的执行，都不可能发生在 g 的执行过程中；但是，h 的调用有可能发生在 g 调用之前，也可能是 g 调用之后。</p>

<h2>一些函数调用的异常安全问题</h2>

<p><strong>2. 当你翻看公司的陈年老代码的时候，你发现了如下的代码片段：</strong></p>

<p>``` cpp
// Example 2</p>

<p>// In some header file:
void f( T1<em>, T2</em> );</p>

<p>// At some call site:
f( new T1, new T2 );
```</p>

<p><strong>这段代码包含潜在的异常安全问题吗？请解释。</strong></p>

<p>是的，这有一些潜在的异常安全问题。</p>

<p>简要归纳：像 new T1 这样的调用，很简单，一个 new 表达式。回忆一下 new 表达式所做的事情（简单起见，忽略定位new 和数组形式的 new，因为这个我们讨论的没有太大关系。）</p>

<ul>
<li>分配内存</li>
<li>在分配的内存中构造一个新的对象；然后</li>
<li>如果由于异常而构造失败，分配的内存将被释放</li>
</ul>


<p>所以每个 new 表达式本质上是两个函数调用：一个是 operator new（可能是全局的，或者这个类型所提供的），另一个是构造函数。</p>

<p>在 Example 2 中，考虑如果编译器生成的代码将按照下面的步骤执行时，将会发生什么：</p>

<ol>
<li>给 T1 分配内存</li>
<li>构造 T1</li>
<li>给 T2 分配内存</li>
<li>构造 T2</li>
<li>调用函数 f</li>
</ol>


<p>它存在的问题是：如果第 3 步或第 4 步由于异常而失败了，C++ 标准没有要求 T1 对象必须销毁和释放内存，这是典型的内存泄漏，很明显这不是件好事。</p>

<p>另一个可能的执行顺序：</p>

<ol>
<li>给 T1 分配内存</li>
<li>给 T2 分配内存</li>
<li>构造 T1</li>
<li>构造 T2</li>
<li>调用函数 f</li>
</ol>


<p>这个执行顺序不仅仅含有一个，而是两个异常安全的问题并且他们会产生不同的结果：</p>

<ul>
<li>如果第 3 步由于异常而失败，那么给 T1 分配的内存将自动释放（第 1 步会回滚），但是标准没有要求释放给 T2 分配的内存，内存泄漏了。</li>
<li>如果第 4 步由于异常而失败，T1 的内存已分配且构造完成，但是标准没有要求销毁和释放它的内存，T1 泄漏了。</li>
</ul>


<p>“呃”，你可能想知道，“为什么这个异常安全漏洞会存在？为什么标准不要求清理时编译器做正确的事来防止这个问题？”</p>

<p>C++ 拥有 C 语言的灵魂——效率，因此 C++ 标准允许编译器某些情形下自行决定表达式的求值顺序，因为这可以允许编译器进行可能的性能优化。为了保证这一点，一些表达式求值规则不是异常安全的，所以如果你想要写异常安全的代码，那么你就需要知道它，并且避免它。</p>

<p>幸运的是，你可以做一些简单的工作来避免这个问题。也许像 unique_ptr 这样的智能指针会有帮助？</p>

<p><strong>3. 当你继续查看的时候，你发现了有人不喜欢 Example 2 的代码，因为上面那个问题提到的文件的后续版本已经被改成了下面这个样子：</strong></p>

<p>``` cpp
// Example 3</p>

<p>// In some header file:
void f( std::unique_ptr<T1>, std::unique_ptr<T2> );</p>

<p>// At some call site:
f( std::unique_ptr<T1>{ new T1 }, std::unique_ptr<T2>{ new T2 } );
```</p>

<p><strong>这比之前的 Example 2 的版本有哪些改进，如果有的话？ 异常安全问题是否仍然存在？请解释。</strong></p>

<p>这个代码试图把问题直接丢给 unique_ptr。很多人相信智能指针是异常安全的万能药，是试金石和护身符，只要有它的出席，就能解决编译器的消化不良。</p>

<p>不是的。没有任何改变。Example 3 仍然不是异常安全的，和之前的原因一模一样。</p>

<p>特别的，只有当资源真的由 unique_ptr 接管时，这些资源才是安全的，但是当还没有到达 unique_ptr 的构造函数时，同样的问题还会存在。因为上面提到的两种执行顺序还是有可能的，只是在调用函数 f 之前需要调用 unique_ptr 的构造函数而已。一个例子：</p>

<ol>
<li>给 T1 分配内存</li>
<li>构造 T1</li>
<li>给 T2 分配内存</li>
<li>构造 T2</li>
<li>构造 unique_ptr<T1></li>
<li>构造 unique_ptr<T2></li>
<li>调用函数 f</li>
</ol>


<p>在上面的情况下，如果第 3 步或第 4 步异常了，相同的问题仍会存在，下面的也是一样：</p>

<ol>
<li>给 T1 分配内存</li>
<li>给 T2 分配内存</li>
<li>构造 T1</li>
<li>构造 T2</li>
<li>构造 unique_ptr<T1></li>
<li>构造 unique_ptr<T2></li>
<li>调用函数 f</li>
</ol>


<p>还是一样，如果第 3 步或第 4 步抛出异常，还是会存在异常安全问题。</p>

<p>幸运的是，这不是 unique_ptr 的问题，只是 unique_ptr 的误用而已。让我们看看如果更好的使用它。</p>

<h2>make_unique</h2>

<p><strong>4. 如何写出一个 make_unique 使它能够解决 Example 3 中的问题，并能以如下方式使用：</strong></p>

<p>``` cpp
// Example 4</p>

<p>// In some header file:
void f( std::unique_ptr<T1>, std::unique_ptr<T2> );</p>

<p>// At some call site:
f( make_unique<T1>(), make_unique<T2>() );
```</p>

<p>基本思路：</p>

<ul>
<li>我们需要同一个线程中的函数调用不要产生交错，所以我们使用函数来完成分配、构造和构造 unique_ptr 对象的的工作。</li>
<li>因为我们需要函数可以配合任何类型工作，所以我们需要使用函数模板。</li>
<li>由于需要通过 make_unique 传递构造参数给需要构造的对象，我们要使用 C++11 的完美转发，把参数传递给 make_unique 函数中的 new 表达式。</li>
<li>shared_ptr 已经有一个类似的设施 std::make_shared，为了一致性我们把这个函数叫做 make_unique。（C++ 11 中没有 make_unique 是某种程度上的疏忽，几乎可以确定，不就的将来它会被添加到标准中，在这段时间内，我们使用下面的实现。）</li>
</ul>


<p>把上面的要素组装到一起，我们可以得到：</p>

<p>``` cpp
template<typename T, typename ...Args>
std::unique_ptr<T> make_unique( Args&amp;&amp; &hellip;args )
{</p>

<pre><code>return std::unique_ptr&lt;T&gt;( new T( std::forward&lt;Args&gt;(args)... ) );
</code></pre>

<p>}
```</p>

<p>这解决了异常安全问题，任何的执行顺序都不会造成资源泄露，因为现在我们只有两个函数，并且我们知道他们必须一个一个的执行。考虑下面的求值顺序：</p>

<ol>
<li>调用函数 make_unique<T1></li>
<li>调用函数 make_unique<T2></li>
<li>调用函数 f</li>
</ol>


<p>如果第 1 步异常了，不会产生泄露因为 make_unique 是异常安全的。</p>

<p>如果第 2 步异常了，那么第一步构造出来的 unique_ptr<T1> 临时对象会被清理掉吗？</p>

<p>是的，它会被清理。可能有人会认为：这难道和 Example 2 是不一样的吗？而 Example 2 是不能正确清理的。不，这和 Example 2 是不同的。因为在这里，unique_ptr<T1> 事实上是一个临时对象，而临时对象的销毁在标准中是明确说明的。在标准 12.2/3 节中（从 C++98 之后没有更改过）：<em>在表达式求值完成之后临时对象将被销毁，包括他们的创建点。即使表达式求值以异常而终止时，也是一样。</em></p>

<p><strong>准则：</strong></p>

<ul>
<li>优先考虑使用 make_shared 来构造 shared_ptr 对象来管理内存，用 make_unique 来构造 unique_ptr 对象。</li>
<li>虽然现在标准 C++ 中还没有 make_unique，这是一个疏忽，几乎可以确定它最终会加入到标准中。在这期间，使用上面的版本，你的代码会向前兼容 C++ 标准的。</li>
<li>避免直接使用 new 或其他的原始的分配内存的方法。取而代之的是，使用类似于 make_unique 的工厂方法，它会包装原始的内存分配然后直接传给需要接管资源的对象，通常是智能指针，它会自动清理资源，或者其他析构函数负责安全的删除资源的对象。</li>
</ul>


<h2>感谢</h2>

<p>这个问题是在 comp.lang.c++.moderated 的讨论中提出的。解决方案中的观点是由 James Kanze, Steve Clamage, 和 Dave Abrahams 在该讨论以及其他讨论和私人邮件中提出的。同时也感谢 Clark Nelson，他起草了 C++11 中的“sequenced before” 的概念，并阐明了其中的疑问。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[译] GotW #101: Compilation Firewalls, Part 2 (Difficulty: 8/10)]]></title>
    <link href="http://bitdewy.github.com/blog/2012/07/02/gotw101/"/>
    <updated>2012-07-02T02:38:00+08:00</updated>
    <id>http://bitdewy.github.com/blog/2012/07/02/gotw101</id>
    <content type="html"><![CDATA[<p>原文在这里 <a href="http://herbsutter.com/gotw/_101/">GotW #101: Compilation Firewalls, Part 2 (Difficulty: 8/10)</a></p>

<h2>Guru问题</h2>

<p><a href="http://bitdewy.github.com/blog/2012/06/30/gotw100/">GotW #100</a> 展示了仅使用标准 C++11 的 Pimpl 惯用法最佳实现：</p>

<p>``` cpp
// in header file
class widget {
public:</p>

<pre><code>widget();
~widget();
</code></pre>

<p>private:</p>

<pre><code>class impl;
unique_ptr&lt;impl&gt; pimpl;
</code></pre>

<p>};</p>

<p>// in implementation file
class widget::impl {</p>

<pre><code>// :::
</code></pre>

<p>};</p>

<p>widget::widget() : pimpl{ new impl{ /<em>&hellip;</em>/ } } { }
widget::~widget() { } // or =default
```</p>

<p>有办法把 Pimpl 模式包装到库中使得 widget 类更容易实现吗？如果可以？应该怎么做？试着让 widget 的实现更方便更简洁，让编译器默认生成的函数有正确的行为，或者当 widget 的实现存在问题时给出编译错误。</p>

<!-- more -->


<h2>解决方案</h2>

<p>是的，我们有一些办法。可能最简单的办法之一是使用一个类似 unique_ptr 的 helper 类，但是我还是会把它叫做 pimpl 而不是 pimpl_ptr 因为他还要负责分配和释放 impl 对象。</p>

<p>让我们朝着我们的目标前进，即简化 widget 的代码。由于 Pimpl 惯用法同时影响可见类的定义的头文件和隐藏私有部分的实现的头文件，我们把 Pimpl 也放到两个文件中。</p>

<p>首先，我们引入一个 pimpl_h.h 然后添加 <code>pimpl&lt;myclass::impl&gt;</code> 类型的数据成员。然后在我们的实现文件中引入 pimpl_impl.h 然后定义我们的 impl 类。</p>

<p>``` cpp
// in header file</p>

<h1>include &ldquo;pimpl_h.h&rdquo;</h1>

<p>class widget {</p>

<pre><code>class impl;
pimpl&lt;impl&gt; m;
// ...
</code></pre>

<p>};</p>

<p>// in implementation file</p>

<h1>include &ldquo;pimpl_impl.h&rdquo;</h1>

<p>class widget::impl {</p>

<pre><code>// ...
</code></pre>

<p>};
```</p>

<p>为什么这比手工实现的 Pimpl 惯用法更好？</p>

<ul>
<li>首先，代码变得简单了，因为我们头文件中减少了代码：在手工实现的版本中，你还需要声明构造函数，然后在实现文件中显式的分配 impl 对象。你应该还记得需要声明析构函数，然后在实现文件中显式的实现，<a href="http://bitdewy.github.com/blog/2012/06/30/gotw100/">GotW #100</a> 中已经解释过这个晦涩的问题。</li>
<li>第二，代码更健壮了：在手工实现的版本中，如果你忘了实现非内联的析构函数，Pimpl 类将能够独立的编译，但是如果调用者试图销毁这个对象时，将会的到一个有用的编译错误“无法生成析构函数，由于 impl 呃，你知道的，不是完整类型”，这可能会使代码调用者挠着头离开，然后找你检查一下这到底是什么问题。</li>
</ul>


<p>pimpl<T> 模板会完成这些工作，不过，我们还要再加点料：它在可见类和实现类之间而不知道任何一个的定义，并且它把所有东西都连接到一起，完成了那些可见类和实现类可能去要做的事。幸运的是，没有什么是 pimpl<T> 不能控制的。</p>

<p>现在，我们来看看 pimpl_h.h 和 pimpl_impl.h 把我们的思绪连接起来。</p>

<h4>pimpl_h.h : 可见类需要的东西</h4>

<p>pimpl_h.h 提供不透明的 impl 和它的指针（在这里，我们使用 m 代替 pimpl）。它同时也声明两个构造函数和一个析构函数，这些将在 pimpl_impl.h 中以非内联的方式实现，并掌管 impl 对象的生命周期。</p>

<p>``` cpp
// pimpl_h.h</p>

<h1>ifndef PIMPL_H_H</h1>

<h1>define PIMPL_H_H</h1>

<h1>include <memory></h1>

<p>template<typename T>
class pimpl {
private:</p>

<pre><code>std::unique_ptr&lt;T&gt; m;
</code></pre>

<p>public:</p>

<pre><code>pimpl();
template&lt;typename ...Args&gt; pimpl( Args&amp;&amp; ... );
~pimpl();
T* operator-&gt;();
T&amp; operator*();
</code></pre>

<p>};</p>

<h1>endif</h1>

<p>```</p>

<p>第二个构造函数提供了一种给 impl 对象传递初始化参数的方式。由于 pimpl 对 impl 一无所知，这时候完美转发立功了！这是一个有意思的惯用法，它会逐渐的被人所熟知：所有的参数用使用 (&amp;&amp;) 右值引用，然后传递参数时使用 std::forward，这些会在 pimpl_impl.h 中实现。</p>

<h4>pimpl_impl.h:提供内部实现</h4>

<p>pimpl_impl.h 提供创建和销毁 impl 对象的其他内部实现，就像上面说的，下面我们将看到完美转发的实现部分。</p>

<p>首先，如果你知道非内联的完美转发模板声明语法，给你发一朵小红花。注意构造函数需要的模板不是一个，而是两个，一个是 pimpl 模板参数，另一个是构造函数的参数的模板参数。</p>

<p>``` cpp
// file pimpl_impl.h</p>

<h1>ifndef PIMPL_IMPL_H</h1>

<h1>define PIMPL_IMPL_H</h1>

<h1>include <utility></h1>

<p>template<typename T>
pimpl<T>::pimpl() : m{ new T{} } { }</p>

<p>template<typename T>
template<typename ...Args>
pimpl<T>::pimpl( Args&amp;&amp; &hellip;args )</p>

<pre><code>: m{ new T{ std::forward&lt;Args&gt;(args)... } } { }
</code></pre>

<p>template<typename T>
pimpl<T>::~pimpl() { }</p>

<p>template<typename T>
T* pimpl<T>::operator->() { return m.get(); }</p>

<p>template<typename T>
T&amp; pimpl<T>::operator<em>() { return </em>m.get(); }</p>

<h1>endif</h1>

<p>```</p>

<p>每个构造函数都可以在不知道 impl 类型细节的时候创建出一个新的 impl 对象。类型只要调用者在其他地方定义就可以了。</p>

<p>转发构造函数可以简单的转发参数，<code>pimpl&lt;widget&gt;::impl</code> 类型可以幸福的提供带着任何参数的构造函数，可见类 widget 的构造函数可以接受这些参数然后安全的正确的转发给 impl，而不需要 pimpl&lt;>。所有需要的“智慧”的东西都由标准中的&amp;&amp;右值引用和 <code>std::forward</code> 提供——这是避免左值需要了解太多右值业务的漂亮的标准实现，而且它能很好地工作。</p>

<h2>注解</h2>

<p>变长模板参数使得转发构造函数写起来比固定模板参数更容易。如果你使用的编译器支持右值语法但是还不支持变长模板参数，有仍然可以实现相同的效果，只是需要一些重复——决定你准备支持的参数个数，然后写一组模板构造函数的重载，来代替单个变长模板构造函数。前三个看起来可能是这个样子：</p>

<p>``` cpp
template<typename T>
template<typename Arg1>
pimpl<T>::pimpl( Arg1&amp;&amp; arg1 )</p>

<pre><code>: m( new T( std::forward&lt;Arg1&gt;(arg1) ) ) { }
</code></pre>

<p>template<typename T>
template<typename Arg1, typename Arg2>
pimpl<T>::pimpl( Arg1&amp;&amp; arg1, Arg2&amp;&amp; arg2 )</p>

<pre><code>: m( new T( std::forward&lt;Arg1&gt;(arg1), std::forward&lt;Arg2&gt;(arg2) ) ) { }
</code></pre>

<p>template<typename T>
template<typename Arg1, typename Arg2, typename Arg3>
pimpl<T>::pimpl( Arg1&amp;&amp; arg1, Arg2&amp;&amp; arg2, Arg3&amp;&amp; arg3 )</p>

<pre><code>: m( new T( std::forward&lt;Arg1&gt;(arg1), std::forward&lt;Arg2&gt;(arg2), std::forward&lt;Arg3&gt;(arg3) ) ) { }
</code></pre>

<p>```</p>

<h2>更改记录</h2>

<p>2011-12-06: 把 pimpl&lt;> 从一个基类更改为成员——我真的讨厌不必要的继承，你也应该是的。</p>

<p>2011-12-13: 增加解释，为什么这比手工实现的 Pimpl 惯用法更好。</p>
]]></content>
  </entry>
  
</feed>
